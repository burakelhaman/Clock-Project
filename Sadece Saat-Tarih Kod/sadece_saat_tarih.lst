CCS PCM C Compiler, Version 5.007, 61971               25-Tem-19 23:22

               Filename:   C:\Users\User\Desktop\CCS C COMPLÝER\sadece_saat_tarih.lst

               ROM used:   921 words (11%)
                           Largest free fragment is 2048
               RAM used:   31 (8%) at main() level
                           50 (14%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1D5
0003:  NOP
.................... #define     rtc_sclk   pin_c1 
.................... #define     rtc_io     pin_c2        
.................... #define     rtc_rst    pin_c0   
....................  
.................... #include <16f877A.h> // özellikleri alýr 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  RETLW  1C
0013:  RETLW  46
*
00BA:  MOVF   43,W
00BB:  CLRF   78
00BC:  SUBWF  42,W
00BD:  BTFSC  03.0
00BE:  GOTO   0C2
00BF:  MOVF   42,W
00C0:  MOVWF  77
00C1:  GOTO   0CE
00C2:  CLRF   77
00C3:  MOVLW  08
00C4:  MOVWF  44
00C5:  RLF    42,F
00C6:  RLF    77,F
00C7:  MOVF   43,W
00C8:  SUBWF  77,W
00C9:  BTFSC  03.0
00CA:  MOVWF  77
00CB:  RLF    78,F
00CC:  DECFSZ 44,F
00CD:  GOTO   0C5
00CE:  RETURN
00CF:  CLRF   77
00D0:  CLRF   78
00D1:  MOVF   42,W
00D2:  BCF    03.0
00D3:  BTFSC  43.0
00D4:  ADDWF  77,F
00D5:  RRF    77,F
00D6:  RRF    78,F
00D7:  BTFSC  43.1
00D8:  ADDWF  77,F
00D9:  RRF    77,F
00DA:  RRF    78,F
00DB:  BTFSC  43.2
00DC:  ADDWF  77,F
00DD:  RRF    77,F
00DE:  RRF    78,F
00DF:  BTFSC  43.3
00E0:  ADDWF  77,F
00E1:  RRF    77,F
00E2:  RRF    78,F
00E3:  BTFSC  43.4
00E4:  ADDWF  77,F
00E5:  RRF    77,F
00E6:  RRF    78,F
00E7:  BTFSC  43.5
00E8:  ADDWF  77,F
00E9:  RRF    77,F
00EA:  RRF    78,F
00EB:  BTFSC  43.6
00EC:  ADDWF  77,F
00ED:  RRF    77,F
00EE:  RRF    78,F
00EF:  BTFSC  43.7
00F0:  ADDWF  77,F
00F1:  RRF    77,F
00F2:  RRF    78,F
00F3:  RETURN
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT , NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD//özellikler 
.................... #use delay(clock=4000000) //osilatör hýzý ayarlanýyor   
*
00A5:  MOVLW  3A
00A6:  MOVWF  04
00A7:  BCF    03.7
00A8:  MOVF   00,W
00A9:  BTFSC  03.2
00AA:  GOTO   0B9
00AB:  MOVLW  01
00AC:  MOVWF  78
00AD:  CLRF   77
00AE:  DECFSZ 77,F
00AF:  GOTO   0AE
00B0:  DECFSZ 78,F
00B1:  GOTO   0AD
00B2:  MOVLW  4A
00B3:  MOVWF  77
00B4:  DECFSZ 77,F
00B5:  GOTO   0B4
00B6:  GOTO   0B7
00B7:  DECFSZ 00,F
00B8:  GOTO   0AB
00B9:  RETURN
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "ds1302.c" //ds1302'ye ait fonksiyonlar programa eklendi 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define     rtc_sclk   pin_c1 
.................... #define     rtc_io     pin_c2        
.................... #define     rtc_rst    pin_c0   
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0014:  CLRF   43
0015:  MOVF   43,W
0016:  SUBLW  07
0017:  BTFSS  03.0
0018:  GOTO   033
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0019:  BCF    03.0
001A:  RRF    42,F
001B:  BTFSC  03.0
001C:  GOTO   01F
001D:  BCF    07.2
001E:  GOTO   020
001F:  BSF    07.2
0020:  BCF    20.2
0021:  MOVF   20,W
0022:  BSF    03.5
0023:  MOVWF  07
....................       output_high(RTC_SCLK); 
0024:  BCF    03.5
0025:  BCF    20.1
0026:  MOVF   20,W
0027:  BSF    03.5
0028:  MOVWF  07
0029:  BCF    03.5
002A:  BSF    07.1
....................       output_low(RTC_SCLK); 
002B:  BCF    20.1
002C:  MOVF   20,W
002D:  BSF    03.5
002E:  MOVWF  07
002F:  BCF    03.5
0030:  BCF    07.1
0031:  INCF   43,F
0032:  GOTO   015
....................    } 
0033:  RETURN
.................... } 
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0034:  BCF    20.0
0035:  MOVF   20,W
0036:  BSF    03.5
0037:  MOVWF  07
0038:  BCF    03.5
0039:  BSF    07.0
....................    write_ds1302_byte(cmd); 
003A:  MOVF   40,W
003B:  MOVWF  42
003C:  CALL   014
....................    write_ds1302_byte(data); 
003D:  MOVF   41,W
003E:  MOVWF  42
003F:  CALL   014
....................    output_low(RTC_RST); 
0040:  BCF    20.0
0041:  MOVF   20,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BCF    07.0
0046:  RETURN
.................... } 
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
0047:  BCF    20.0
0048:  MOVF   20,W
0049:  BSF    03.5
004A:  MOVWF  07
004B:  BCF    03.5
004C:  BSF    07.0
....................    write_ds1302_byte(cmd); 
004D:  MOVF   3D,W
004E:  MOVWF  42
004F:  CALL   014
....................     
....................    input(RTC_IO); 
0050:  BSF    20.2
0051:  MOVF   20,W
0052:  BSF    03.5
0053:  MOVWF  07
....................    delay_us(1); 
0054:  NOP
....................           
....................    for(i=0;i<=7;++i) { 
0055:  BCF    03.5
0056:  CLRF   3E
0057:  MOVF   3E,W
0058:  SUBLW  07
0059:  BTFSS  03.0
005A:  GOTO   076
....................       shift_right(&data,1,input(RTC_IO)); 
005B:  BSF    20.2
005C:  MOVF   20,W
005D:  BSF    03.5
005E:  MOVWF  07
005F:  BCF    03.5
0060:  BTFSC  07.2
0061:  GOTO   064
0062:  BCF    03.0
0063:  GOTO   065
0064:  BSF    03.0
0065:  RRF    3F,F
....................       output_high(RTC_SCLK); 
0066:  BCF    20.1
0067:  MOVF   20,W
0068:  BSF    03.5
0069:  MOVWF  07
006A:  BCF    03.5
006B:  BSF    07.1
....................       delay_us(2); 
006C:  GOTO   06D
....................       output_low(RTC_SCLK); 
006D:  BCF    20.1
006E:  MOVF   20,W
006F:  BSF    03.5
0070:  MOVWF  07
0071:  BCF    03.5
0072:  BCF    07.1
....................       delay_us(2); 
0073:  GOTO   074
0074:  INCF   3E,F
0075:  GOTO   057
....................    } 
....................    output_low(RTC_RST); 
0076:  BCF    20.0
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
007A:  BCF    03.5
007B:  BCF    07.0
....................  
....................    return(data); 
007C:  MOVF   3F,W
007D:  MOVWF  78
007E:  RETURN
.................... } 
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
007F:  BCF    20.0
0080:  MOVF   20,W
0081:  BSF    03.5
0082:  MOVWF  07
0083:  BCF    03.5
0084:  BCF    07.0
....................    delay_us(2); 
0085:  GOTO   086
....................    output_low(RTC_SCLK); 
0086:  BCF    20.1
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  BCF    03.5
008B:  BCF    07.1
....................    write_ds1302(0x8e,0); 
008C:  MOVLW  8E
008D:  MOVWF  40
008E:  CLRF   41
008F:  CALL   034
....................    write_ds1302(0x90,0xa4); 
0090:  MOVLW  90
0091:  MOVWF  40
0092:  MOVLW  A4
0093:  MOVWF  41
0094:  CALL   034
....................    x=read_ds1302(0x81); 
0095:  MOVLW  81
0096:  MOVWF  3D
0097:  CALL   047
0098:  MOVF   78,W
0099:  MOVWF  39
....................    if((x & 0x80)!=0) 
009A:  MOVF   39,W
009B:  ANDLW  80
009C:  BTFSC  03.2
009D:  GOTO   0A2
....................      write_ds1302(0x80,0); 
009E:  MOVLW  80
009F:  MOVWF  40
00A0:  CLRF   41
00A1:  CALL   034
00A2:  BCF    0A.3
00A3:  BCF    0A.4
00A4:  GOTO   1F5 (RETURN)
.................... } 
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
00F4:  MOVF   3F,W
00F5:  MOVWF  42
00F6:  MOVLW  0A
00F7:  MOVWF  43
00F8:  CALL   0BA
00F9:  MOVF   78,W
00FA:  MOVWF  40
....................    nibl=data-(nibh*10); 
00FB:  MOVF   40,W
00FC:  MOVWF  42
00FD:  MOVLW  0A
00FE:  MOVWF  43
00FF:  CALL   0CF
0100:  MOVF   78,W
0101:  SUBWF  3F,W
0102:  MOVWF  41
....................  
....................    return((nibh<<4)|nibl); 
0103:  SWAPF  40,W
0104:  MOVWF  77
0105:  MOVLW  F0
0106:  ANDWF  77,F
0107:  MOVF   77,W
0108:  IORWF  41,W
0109:  MOVWF  78
010A:  RETURN
.................... } 
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
0153:  MOVF   3E,W
0154:  MOVWF  3F
....................    data=(i>>4)*10; 
0155:  SWAPF  3F,W
0156:  MOVWF  77
0157:  MOVLW  0F
0158:  ANDWF  77,F
0159:  MOVF   77,W
015A:  MOVWF  41
015B:  MOVWF  42
015C:  MOVLW  0A
015D:  MOVWF  43
015E:  CALL   0CF
015F:  MOVF   78,W
0160:  MOVWF  3E
....................    data=data+(i<<4>>4); 
0161:  SWAPF  3F,W
0162:  MOVWF  77
0163:  MOVLW  F0
0164:  ANDWF  77,F
0165:  MOVF   77,W
0166:  SWAPF  77,F
0167:  MOVLW  0F
0168:  ANDWF  77,F
0169:  MOVF   77,W
016A:  ADDWF  3E,F
....................  
....................    return data; 
016B:  MOVF   3E,W
016C:  MOVWF  78
016D:  RETURN
.................... } 
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
010B:  MOVF   39,W
010C:  MOVWF  3F
010D:  CALL   0F4
010E:  MOVF   78,W
010F:  MOVWF  3F
0110:  MOVLW  86
0111:  MOVWF  40
0112:  MOVF   78,W
0113:  MOVWF  41
0114:  CALL   034
....................    write_ds1302(0x88,get_bcd(mth)); 
0115:  MOVF   3A,W
0116:  MOVWF  3F
0117:  CALL   0F4
0118:  MOVF   78,W
0119:  MOVWF  3F
011A:  MOVLW  88
011B:  MOVWF  40
011C:  MOVF   78,W
011D:  MOVWF  41
011E:  CALL   034
....................    write_ds1302(0x8c,get_bcd(year)); 
011F:  MOVF   3B,W
0120:  MOVWF  3F
0121:  CALL   0F4
0122:  MOVF   78,W
0123:  MOVWF  3F
0124:  MOVLW  8C
0125:  MOVWF  40
0126:  MOVF   78,W
0127:  MOVWF  41
0128:  CALL   034
....................    write_ds1302(0x8a,get_bcd(dow)); 
0129:  MOVF   3C,W
012A:  MOVWF  3F
012B:  CALL   0F4
012C:  MOVF   78,W
012D:  MOVWF  3F
012E:  MOVLW  8A
012F:  MOVWF  40
0130:  MOVF   78,W
0131:  MOVWF  41
0132:  CALL   034
....................    write_ds1302(0x84,get_bcd(hr)); 
0133:  MOVF   3D,W
0134:  MOVWF  3F
0135:  CALL   0F4
0136:  MOVF   78,W
0137:  MOVWF  3F
0138:  MOVLW  84
0139:  MOVWF  40
013A:  MOVF   78,W
013B:  MOVWF  41
013C:  CALL   034
....................    write_ds1302(0x82,get_bcd(min)); 
013D:  MOVF   3E,W
013E:  MOVWF  3F
013F:  CALL   0F4
0140:  MOVF   78,W
0141:  MOVWF  3F
0142:  MOVLW  82
0143:  MOVWF  40
0144:  MOVF   78,W
0145:  MOVWF  41
0146:  CALL   034
....................    write_ds1302(0x80,get_bcd(0)); 
0147:  CLRF   3F
0148:  CALL   0F4
0149:  MOVF   78,W
014A:  MOVWF  3F
014B:  MOVLW  80
014C:  MOVWF  40
014D:  MOVF   78,W
014E:  MOVWF  41
014F:  CALL   034
0150:  BCF    0A.3
0151:  BCF    0A.4
0152:  GOTO   205 (RETURN)
.................... } 
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
0220:  MOVLW  87
0221:  MOVWF  3D
0222:  CALL   047
0223:  MOVF   78,W
0224:  MOVWF  39
0225:  MOVWF  3E
0226:  CALL   153
0227:  MOVF   78,W
0228:  MOVWF  29
....................    mth = rm_bcd(read_ds1302(0x89)); 
0229:  MOVLW  89
022A:  MOVWF  3D
022B:  CALL   047
022C:  MOVF   78,W
022D:  MOVWF  39
022E:  MOVWF  3E
022F:  CALL   153
0230:  MOVF   78,W
0231:  MOVWF  2A
....................    year = rm_bcd(read_ds1302(0x8d)); 
0232:  MOVLW  8D
0233:  MOVWF  3D
0234:  CALL   047
0235:  MOVF   78,W
0236:  MOVWF  39
0237:  MOVWF  3E
0238:  CALL   153
0239:  MOVF   78,W
023A:  MOVWF  2B
....................    dow = rm_bcd(read_ds1302(0x8b)); 
023B:  MOVLW  8B
023C:  MOVWF  3D
023D:  CALL   047
023E:  MOVF   78,W
023F:  MOVWF  39
0240:  MOVWF  3E
0241:  CALL   153
0242:  MOVF   78,W
0243:  MOVWF  2C
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
0205:  MOVLW  85
0206:  MOVWF  3D
0207:  CALL   047
0208:  MOVF   78,W
0209:  MOVWF  39
020A:  MOVWF  3E
020B:  CALL   153
020C:  MOVF   78,W
020D:  MOVWF  28
....................    min = rm_bcd(read_ds1302(0x83)); 
020E:  MOVLW  83
020F:  MOVWF  3D
0210:  CALL   047
0211:  MOVF   78,W
0212:  MOVWF  39
0213:  MOVWF  3E
0214:  CALL   153
0215:  MOVF   78,W
0216:  MOVWF  27
....................    sec = rm_bcd(read_ds1302(0x81)); 
0217:  MOVLW  81
0218:  MOVWF  3D
0219:  CALL   047
021A:  MOVF   78,W
021B:  MOVWF  39
021C:  MOVWF  3E
021D:  CALL   153
021E:  MOVF   78,W
021F:  MOVWF  26
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... #define display_1 pin_d0 
.................... #define display_2 pin_d1 
.................... #define display_3 pin_d2 
.................... #define display_4 pin_d3 
.................... #define display_5 pin_d4 
.................... #define display_6 pin_d5 
....................  
.................... const int digit[12]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x1C,0x46};//ortak anot 
.................... int16 i; 
.................... unsigned int bilgi; 
.................... int birler,onlar,saniye,dakika,saat,gun,ay,yil,haftanin_gunu,saniyeon,dakikaon,saaton,gunon,ayon,yilon,saniyebir,dakikabir,saatbir,gunbir,aybir,yilbir; 
....................  
....................  
.................... void gecis_animasyon() 
.................... { 
.................... output_d(0x00); 
*
016E:  BSF    03.5
016F:  CLRF   08
0170:  BCF    03.5
0171:  CLRF   08
.................... delay_ms(300);  
0172:  MOVLW  02
0173:  MOVWF  39
0174:  MOVLW  96
0175:  MOVWF  3A
0176:  CALL   0A5
0177:  DECFSZ 39,F
0178:  GOTO   174
....................  
.................... output_d(0b00000001);          
0179:  BSF    03.5
017A:  CLRF   08
017B:  MOVLW  01
017C:  BCF    03.5
017D:  MOVWF  08
.................... output_b( 0xb6 );     
017E:  BSF    03.5
017F:  CLRF   06
0180:  MOVLW  B6
0181:  BCF    03.5
0182:  MOVWF  06
.................... delay_ms(100);             
0183:  MOVLW  64
0184:  MOVWF  3A
0185:  CALL   0A5
.................... output_d(0b00000010);          
0186:  BSF    03.5
0187:  CLRF   08
0188:  MOVLW  02
0189:  BCF    03.5
018A:  MOVWF  08
.................... output_b( 0xb6 );     
018B:  BSF    03.5
018C:  CLRF   06
018D:  MOVLW  B6
018E:  BCF    03.5
018F:  MOVWF  06
.................... delay_ms(100); 
0190:  MOVLW  64
0191:  MOVWF  3A
0192:  CALL   0A5
.................... output_d(0b00000100);          
0193:  BSF    03.5
0194:  CLRF   08
0195:  MOVLW  04
0196:  BCF    03.5
0197:  MOVWF  08
.................... output_b( 0xb6 );     
0198:  BSF    03.5
0199:  CLRF   06
019A:  MOVLW  B6
019B:  BCF    03.5
019C:  MOVWF  06
.................... delay_ms(100); 
019D:  MOVLW  64
019E:  MOVWF  3A
019F:  CALL   0A5
.................... output_d(0b00001000);          
01A0:  BSF    03.5
01A1:  CLRF   08
01A2:  MOVLW  08
01A3:  BCF    03.5
01A4:  MOVWF  08
.................... output_b( 0xb6 );     
01A5:  BSF    03.5
01A6:  CLRF   06
01A7:  MOVLW  B6
01A8:  BCF    03.5
01A9:  MOVWF  06
.................... delay_ms(100); 
01AA:  MOVLW  64
01AB:  MOVWF  3A
01AC:  CALL   0A5
.................... output_d(0b00010000);          
01AD:  BSF    03.5
01AE:  CLRF   08
01AF:  MOVLW  10
01B0:  BCF    03.5
01B1:  MOVWF  08
.................... output_b( 0xb6 );     
01B2:  BSF    03.5
01B3:  CLRF   06
01B4:  MOVLW  B6
01B5:  BCF    03.5
01B6:  MOVWF  06
.................... delay_ms(100); 
01B7:  MOVLW  64
01B8:  MOVWF  3A
01B9:  CALL   0A5
.................... output_d(0b00100000);          
01BA:  BSF    03.5
01BB:  CLRF   08
01BC:  MOVLW  20
01BD:  BCF    03.5
01BE:  MOVWF  08
.................... output_b( 0xb6 );     
01BF:  BSF    03.5
01C0:  CLRF   06
01C1:  MOVLW  B6
01C2:  BCF    03.5
01C3:  MOVWF  06
.................... delay_ms(100);          
01C4:  MOVLW  64
01C5:  MOVWF  3A
01C6:  CALL   0A5
....................  
.................... output_d(0x00); 
01C7:  BSF    03.5
01C8:  CLRF   08
01C9:  BCF    03.5
01CA:  CLRF   08
.................... delay_ms(300); 
01CB:  MOVLW  02
01CC:  MOVWF  39
01CD:  MOVLW  96
01CE:  MOVWF  3A
01CF:  CALL   0A5
01D0:  DECFSZ 39,F
01D1:  GOTO   1CD
01D2:  BCF    0A.3
01D3:  BCF    0A.4
01D4:  GOTO   318 (RETURN)
.................... } 
....................     
....................    void main() //baþlangýç 
01D5:  MOVLW  FF
01D6:  MOVWF  20
01D7:  BSF    03.5
01D8:  BSF    1F.0
01D9:  BSF    1F.1
01DA:  BSF    1F.2
01DB:  BCF    1F.3
01DC:  MOVLW  07
01DD:  MOVWF  1C
01DE:  BCF    03.7
01DF:  MOVLW  1F
01E0:  ANDWF  03,F
.................... { 
....................    set_tris_b(0x00); 
01E1:  MOVLW  00
01E2:  MOVWF  06
....................    set_tris_d(0x00); 
01E3:  MOVWF  08
....................    output_a(0x00); 
01E4:  CLRF   05
01E5:  BCF    03.5
01E6:  CLRF   05
....................    output_b(0x00); 
01E7:  BSF    03.5
01E8:  CLRF   06
01E9:  BCF    03.5
01EA:  CLRF   06
....................    output_c(0x00); 
01EB:  MOVWF  20
01EC:  BSF    03.5
01ED:  CLRF   07
01EE:  BCF    03.5
01EF:  CLRF   07
....................    output_d(0x00); 
01F0:  BSF    03.5
01F1:  CLRF   08
01F2:  BCF    03.5
01F3:  CLRF   08
....................    rtc_init(); 
01F4:  GOTO   07F
....................    delay_ms(20); 
01F5:  MOVLW  14
01F6:  MOVWF  3A
01F7:  CALL   0A5
....................    rtc_set_datetime(25,07,19,5,16,21); 
01F8:  MOVLW  19
01F9:  MOVWF  39
01FA:  MOVLW  07
01FB:  MOVWF  3A
01FC:  MOVLW  13
01FD:  MOVWF  3B
01FE:  MOVLW  05
01FF:  MOVWF  3C
0200:  MOVLW  10
0201:  MOVWF  3D
0202:  MOVLW  15
0203:  MOVWF  3E
0204:  GOTO   10B
....................  
....................    while(1) 
....................    {      
....................    rtc_get_time(saat,dakika,saniye); 
....................    rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................    saniyeon=saniye/10; 
*
0244:  MOVF   26,W
0245:  MOVWF  42
0246:  MOVLW  0A
0247:  MOVWF  43
0248:  CALL   0BA
0249:  MOVF   78,W
024A:  MOVWF  2D
....................    saniyebir=saniye%10; 
024B:  MOVF   26,W
024C:  MOVWF  42
024D:  MOVLW  0A
024E:  MOVWF  43
024F:  CALL   0BA
0250:  MOVF   77,W
0251:  MOVWF  33
....................    dakikaon=dakika/10; 
0252:  MOVF   27,W
0253:  MOVWF  42
0254:  MOVLW  0A
0255:  MOVWF  43
0256:  CALL   0BA
0257:  MOVF   78,W
0258:  MOVWF  2E
....................    dakikabir=dakika%10; 
0259:  MOVF   27,W
025A:  MOVWF  42
025B:  MOVLW  0A
025C:  MOVWF  43
025D:  CALL   0BA
025E:  MOVF   77,W
025F:  MOVWF  34
....................    saaton=saat/10; 
0260:  MOVF   28,W
0261:  MOVWF  42
0262:  MOVLW  0A
0263:  MOVWF  43
0264:  CALL   0BA
0265:  MOVF   78,W
0266:  MOVWF  2F
....................    saatbir=saat%10; 
0267:  MOVF   28,W
0268:  MOVWF  42
0269:  MOVLW  0A
026A:  MOVWF  43
026B:  CALL   0BA
026C:  MOVF   77,W
026D:  MOVWF  35
....................    gunon=gun/10; 
026E:  MOVF   29,W
026F:  MOVWF  42
0270:  MOVLW  0A
0271:  MOVWF  43
0272:  CALL   0BA
0273:  MOVF   78,W
0274:  MOVWF  30
....................    gunbir=gun%10; 
0275:  MOVF   29,W
0276:  MOVWF  42
0277:  MOVLW  0A
0278:  MOVWF  43
0279:  CALL   0BA
027A:  MOVF   77,W
027B:  MOVWF  36
....................    ayon=ay/10; 
027C:  MOVF   2A,W
027D:  MOVWF  42
027E:  MOVLW  0A
027F:  MOVWF  43
0280:  CALL   0BA
0281:  MOVF   78,W
0282:  MOVWF  31
....................    aybir=ay%10; 
0283:  MOVF   2A,W
0284:  MOVWF  42
0285:  MOVLW  0A
0286:  MOVWF  43
0287:  CALL   0BA
0288:  MOVF   77,W
0289:  MOVWF  37
....................    yilon=yil/10; 
028A:  MOVF   2B,W
028B:  MOVWF  42
028C:  MOVLW  0A
028D:  MOVWF  43
028E:  CALL   0BA
028F:  MOVF   78,W
0290:  MOVWF  32
....................    yilbir=yil%10; 
0291:  MOVF   2B,W
0292:  MOVWF  42
0293:  MOVLW  0A
0294:  MOVWF  43
0295:  CALL   0BA
0296:  MOVF   77,W
0297:  MOVWF  38
....................     
....................             for(i=0;i<50;i++) 
0298:  CLRF   22
0299:  CLRF   21
029A:  MOVF   22,F
029B:  BTFSS  03.2
029C:  GOTO   317
029D:  MOVF   21,W
029E:  SUBLW  31
029F:  BTFSS  03.0
02A0:  GOTO   317
....................          { 
....................          output_high(display_1);  // 1. display aktif durumda 
02A1:  BSF    03.5
02A2:  BCF    08.0
02A3:  BCF    03.5
02A4:  BSF    08.0
....................          output_b(digit[saaton]); // displaye bilgi gönderiliyor 
02A5:  MOVF   2F,W
02A6:  CALL   004
02A7:  MOVWF  39
02A8:  BSF    03.5
02A9:  CLRF   06
02AA:  BCF    03.5
02AB:  MOVF   39,W
02AC:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
02AD:  MOVLW  1E
02AE:  MOVWF  3A
02AF:  CALL   0A5
....................          output_low(display_1);   // 1. display pasif durumda 
02B0:  BSF    03.5
02B1:  BCF    08.0
02B2:  BCF    03.5
02B3:  BCF    08.0
....................           
....................          output_high(display_2);  // 2. display aktif durumda 
02B4:  BSF    03.5
02B5:  BCF    08.1
02B6:  BCF    03.5
02B7:  BSF    08.1
....................          output_b(digit[saatbir]); // displaye bilgi gönderiliyor 
02B8:  MOVF   35,W
02B9:  CALL   004
02BA:  MOVWF  39
02BB:  BSF    03.5
02BC:  CLRF   06
02BD:  BCF    03.5
02BE:  MOVF   39,W
02BF:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
02C0:  MOVLW  1E
02C1:  MOVWF  3A
02C2:  CALL   0A5
....................          output_low(display_2);   // 2. display pasif durumda 
02C3:  BSF    03.5
02C4:  BCF    08.1
02C5:  BCF    03.5
02C6:  BCF    08.1
....................     
....................          output_high(display_3);  //3. display aktif durumda 
02C7:  BSF    03.5
02C8:  BCF    08.2
02C9:  BCF    03.5
02CA:  BSF    08.2
....................          output_b(digit[dakikaon]); // displaye bilgi gönderiliyor 
02CB:  MOVF   2E,W
02CC:  CALL   004
02CD:  MOVWF  39
02CE:  BSF    03.5
02CF:  CLRF   06
02D0:  BCF    03.5
02D1:  MOVF   39,W
02D2:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
02D3:  MOVLW  1E
02D4:  MOVWF  3A
02D5:  CALL   0A5
....................          output_low(display_3);   // 3. display pasif durumda 
02D6:  BSF    03.5
02D7:  BCF    08.2
02D8:  BCF    03.5
02D9:  BCF    08.2
....................           
....................          output_high(display_4);  // 4. display aktif durumda 
02DA:  BSF    03.5
02DB:  BCF    08.3
02DC:  BCF    03.5
02DD:  BSF    08.3
....................          output_b(digit[dakikabir]); // displaye bilgi gönderiliyor 
02DE:  MOVF   34,W
02DF:  CALL   004
02E0:  MOVWF  39
02E1:  BSF    03.5
02E2:  CLRF   06
02E3:  BCF    03.5
02E4:  MOVF   39,W
02E5:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
02E6:  MOVLW  1E
02E7:  MOVWF  3A
02E8:  CALL   0A5
....................          output_low(display_4);   // 4. display pasif durumda 
02E9:  BSF    03.5
02EA:  BCF    08.3
02EB:  BCF    03.5
02EC:  BCF    08.3
....................           
....................          output_high(display_5);  // 5. display aktif durumda 
02ED:  BSF    03.5
02EE:  BCF    08.4
02EF:  BCF    03.5
02F0:  BSF    08.4
....................          output_b(digit[saniyeon]); // displaye bilgi gönderiliyor 
02F1:  MOVF   2D,W
02F2:  CALL   004
02F3:  MOVWF  39
02F4:  BSF    03.5
02F5:  CLRF   06
02F6:  BCF    03.5
02F7:  MOVF   39,W
02F8:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
02F9:  MOVLW  1E
02FA:  MOVWF  3A
02FB:  CALL   0A5
....................          output_low(display_5);   // 5. display pasif durumda 
02FC:  BSF    03.5
02FD:  BCF    08.4
02FE:  BCF    03.5
02FF:  BCF    08.4
....................           
....................          output_high(display_6);  // 6. display aktif durumda 
0300:  BSF    03.5
0301:  BCF    08.5
0302:  BCF    03.5
0303:  BSF    08.5
....................          output_b(digit[saniyebir]); // displaye bilgi gönderiliyor 
0304:  MOVF   33,W
0305:  CALL   004
0306:  MOVWF  39
0307:  BSF    03.5
0308:  CLRF   06
0309:  BCF    03.5
030A:  MOVF   39,W
030B:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
030C:  MOVLW  1E
030D:  MOVWF  3A
030E:  CALL   0A5
....................          output_low(display_6);   // 6. display pasif durumda 
030F:  BSF    03.5
0310:  BCF    08.5
0311:  BCF    03.5
0312:  BCF    08.5
0313:  INCF   21,F
0314:  BTFSC  03.2
0315:  INCF   22,F
0316:  GOTO   29A
....................          }  
....................           
....................            gecis_animasyon();     
0317:  GOTO   16E
....................           
....................         for(i=0;i<50;i++) 
0318:  CLRF   22
0319:  CLRF   21
031A:  MOVF   22,F
031B:  BTFSS  03.2
031C:  GOTO   397
031D:  MOVF   21,W
031E:  SUBLW  31
031F:  BTFSS  03.0
0320:  GOTO   397
....................          { 
....................          output_high(display_1);  // 1. display aktif durumda 
0321:  BSF    03.5
0322:  BCF    08.0
0323:  BCF    03.5
0324:  BSF    08.0
....................          output_b(digit[gunon]); // displaye bilgi gönderiliyor 
0325:  MOVF   30,W
0326:  CALL   004
0327:  MOVWF  39
0328:  BSF    03.5
0329:  CLRF   06
032A:  BCF    03.5
032B:  MOVF   39,W
032C:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
032D:  MOVLW  1E
032E:  MOVWF  3A
032F:  CALL   0A5
....................          output_low(display_1);   // 1. display pasif durumda 
0330:  BSF    03.5
0331:  BCF    08.0
0332:  BCF    03.5
0333:  BCF    08.0
....................           
....................          output_high(display_2);  // 2. display aktif durumda 
0334:  BSF    03.5
0335:  BCF    08.1
0336:  BCF    03.5
0337:  BSF    08.1
....................          output_b(digit[gunbir]); // displaye bilgi gönderiliyor 
0338:  MOVF   36,W
0339:  CALL   004
033A:  MOVWF  39
033B:  BSF    03.5
033C:  CLRF   06
033D:  BCF    03.5
033E:  MOVF   39,W
033F:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
0340:  MOVLW  1E
0341:  MOVWF  3A
0342:  CALL   0A5
....................          output_low(display_2);   // 2. display pasif durumda 
0343:  BSF    03.5
0344:  BCF    08.1
0345:  BCF    03.5
0346:  BCF    08.1
....................     
....................          output_high(display_3);  //3. display aktif durumda 
0347:  BSF    03.5
0348:  BCF    08.2
0349:  BCF    03.5
034A:  BSF    08.2
....................          output_b(digit[ayon]); // displaye bilgi gönderiliyor 
034B:  MOVF   31,W
034C:  CALL   004
034D:  MOVWF  39
034E:  BSF    03.5
034F:  CLRF   06
0350:  BCF    03.5
0351:  MOVF   39,W
0352:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
0353:  MOVLW  1E
0354:  MOVWF  3A
0355:  CALL   0A5
....................          output_low(display_3);   // 3. display pasif durumda 
0356:  BSF    03.5
0357:  BCF    08.2
0358:  BCF    03.5
0359:  BCF    08.2
....................           
....................          output_high(display_4);  // 4. display aktif durumda 
035A:  BSF    03.5
035B:  BCF    08.3
035C:  BCF    03.5
035D:  BSF    08.3
....................          output_b(digit[aybir]); // displaye bilgi gönderiliyor 
035E:  MOVF   37,W
035F:  CALL   004
0360:  MOVWF  39
0361:  BSF    03.5
0362:  CLRF   06
0363:  BCF    03.5
0364:  MOVF   39,W
0365:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
0366:  MOVLW  1E
0367:  MOVWF  3A
0368:  CALL   0A5
....................          output_low(display_4);   // 4. display pasif durumda 
0369:  BSF    03.5
036A:  BCF    08.3
036B:  BCF    03.5
036C:  BCF    08.3
....................           
....................          output_high(display_5);  // 5. display aktif durumda 
036D:  BSF    03.5
036E:  BCF    08.4
036F:  BCF    03.5
0370:  BSF    08.4
....................          output_b(digit[yilon]); // displaye bilgi gönderiliyor 
0371:  MOVF   32,W
0372:  CALL   004
0373:  MOVWF  39
0374:  BSF    03.5
0375:  CLRF   06
0376:  BCF    03.5
0377:  MOVF   39,W
0378:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
0379:  MOVLW  1E
037A:  MOVWF  3A
037B:  CALL   0A5
....................          output_low(display_5);   // 5. display pasif durumda 
037C:  BSF    03.5
037D:  BCF    08.4
037E:  BCF    03.5
037F:  BCF    08.4
....................           
....................          output_high(display_6);  // 6. display aktif durumda 
0380:  BSF    03.5
0381:  BCF    08.5
0382:  BCF    03.5
0383:  BSF    08.5
....................          output_b(digit[yilbir]); // displaye bilgi gönderiliyor 
0384:  MOVF   38,W
0385:  CALL   004
0386:  MOVWF  39
0387:  BSF    03.5
0388:  CLRF   06
0389:  BCF    03.5
038A:  MOVF   39,W
038B:  MOVWF  06
....................          delay_ms(30);             // gecikme veriliyor 
038C:  MOVLW  1E
038D:  MOVWF  3A
038E:  CALL   0A5
....................          output_low(display_6);   // 6. display pasif durumda 
038F:  BSF    03.5
0390:  BCF    08.5
0391:  BCF    03.5
0392:  BCF    08.5
0393:  INCF   21,F
0394:  BTFSC  03.2
0395:  INCF   22,F
0396:  GOTO   31A
....................          } 
0397:  GOTO   205
....................  
....................    } 
.................... } 
0398:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
