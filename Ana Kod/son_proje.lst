CCS PCM C Compiler, Version 5.007, 61971               07-Aðu-19 14:57

               Filename:   C:\Users\User\Desktop\CCS C COMPLÝER\son_proje.lst

               ROM used:   4231 words (52%)
                           Largest free fragment is 2048
               RAM used:   35 (10%) at main() level
                           56 (15%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
....................  
.................... #define SH_CP   PIN_b0 // shift register clock ucu 
.................... #define DS      PIN_b1 // data ucu 
.................... #define ST_CP   PIN_b2 // storage register ucu 
.................... #define     rtc_sclk   pin_c1 
.................... #define     rtc_io     pin_c2 
.................... #define     rtc_rst    pin_c0 
.................... #define     buzzer      pin_b4 
....................  
.................... #include <16f877A.h> // özellikleri alýr 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  77
0009:  RETLW  41
000A:  RETLW  3B
000B:  RETLW  5B
000C:  RETLW  4D
000D:  RETLW  5E
000E:  RETLW  7E
000F:  RETLW  43
0010:  RETLW  7F
0011:  RETLW  5F
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  F7
0017:  RETLW  C1
0018:  RETLW  BB
0019:  RETLW  DB
001A:  RETLW  CD
001B:  RETLW  DE
001C:  RETLW  FE
001D:  RETLW  C3
001E:  RETLW  FF
001F:  RETLW  DF
*
0126:  CLRF   77
0127:  CLRF   78
0128:  MOVF   41,W
0129:  BCF    03.0
012A:  BTFSC  42.0
012B:  ADDWF  77,F
012C:  RRF    77,F
012D:  RRF    78,F
012E:  BTFSC  42.1
012F:  ADDWF  77,F
0130:  RRF    77,F
0131:  RRF    78,F
0132:  BTFSC  42.2
0133:  ADDWF  77,F
0134:  RRF    77,F
0135:  RRF    78,F
0136:  BTFSC  42.3
0137:  ADDWF  77,F
0138:  RRF    77,F
0139:  RRF    78,F
013A:  BTFSC  42.4
013B:  ADDWF  77,F
013C:  RRF    77,F
013D:  RRF    78,F
013E:  BTFSC  42.5
013F:  ADDWF  77,F
0140:  RRF    77,F
0141:  RRF    78,F
0142:  BTFSC  42.6
0143:  ADDWF  77,F
0144:  RRF    77,F
0145:  RRF    78,F
0146:  BTFSC  42.7
0147:  ADDWF  77,F
0148:  RRF    77,F
0149:  RRF    78,F
014A:  RETURN
*
0166:  MOVF   3C,W
0167:  CLRF   78
0168:  SUBWF  3B,W
0169:  BTFSC  03.0
016A:  GOTO   16E
016B:  MOVF   3B,W
016C:  MOVWF  77
016D:  GOTO   17A
016E:  CLRF   77
016F:  MOVLW  08
0170:  MOVWF  3D
0171:  RLF    3B,F
0172:  RLF    77,F
0173:  MOVF   3C,W
0174:  SUBWF  77,W
0175:  BTFSC  03.0
0176:  MOVWF  77
0177:  RLF    78,F
0178:  DECFSZ 3D,F
0179:  GOTO   171
017A:  RETURN
*
072F:  MOVLW  8E
0730:  MOVWF  77
0731:  MOVF   3E,W
0732:  SUBWF  77,F
0733:  MOVF   3F,W
0734:  MOVWF  79
0735:  MOVF   40,W
0736:  MOVWF  78
0737:  BSF    79.7
0738:  MOVF   77,F
0739:  BTFSC  03.2
073A:  GOTO   746
073B:  BCF    03.0
073C:  MOVF   79,F
073D:  BTFSS  03.2
073E:  GOTO   742
073F:  MOVF   78,F
0740:  BTFSC  03.2
0741:  GOTO   746
0742:  RRF    79,F
0743:  RRF    78,F
0744:  DECFSZ 77,F
0745:  GOTO   73B
0746:  BTFSS  3F.7
0747:  GOTO   74D
0748:  COMF   78,F
0749:  COMF   79,F
074A:  INCF   78,F
074B:  BTFSC  03.2
074C:  INCF   79,F
074D:  BCF    0A.3
074E:  BSF    0A.4
074F:  GOTO   287 (RETURN)
*
0BA1:  MOVLW  8E
0BA2:  MOVWF  77
0BA3:  MOVF   42,W
0BA4:  MOVWF  78
0BA5:  MOVF   41,W
0BA6:  MOVWF  79
0BA7:  CLRF   7A
0BA8:  BTFSS  42.7
0BA9:  GOTO   3AF
0BAA:  COMF   78,F
0BAB:  COMF   79,F
0BAC:  INCF   79,F
0BAD:  BTFSC  03.2
0BAE:  INCF   78,F
0BAF:  MOVF   78,F
0BB0:  BTFSS  03.2
0BB1:  GOTO   3BC
0BB2:  MOVF   79,W
0BB3:  MOVWF  78
0BB4:  CLRF   79
0BB5:  MOVLW  08
0BB6:  SUBWF  77,F
0BB7:  MOVF   78,F
0BB8:  BTFSS  03.2
0BB9:  GOTO   3BC
0BBA:  CLRF   77
0BBB:  GOTO   3C5
0BBC:  BCF    03.0
0BBD:  BTFSC  78.7
0BBE:  GOTO   3C3
0BBF:  RLF    79,F
0BC0:  RLF    78,F
0BC1:  DECF   77,F
0BC2:  GOTO   3BC
0BC3:  BTFSS  42.7
0BC4:  BCF    78.7
*
0BDA:  MOVF   45,W
0BDB:  BTFSC  03.2
0BDC:  GOTO   49F
0BDD:  MOVWF  51
0BDE:  MOVF   49,W
0BDF:  BTFSC  03.2
0BE0:  GOTO   49F
0BE1:  SUBWF  51,F
0BE2:  BTFSS  03.0
0BE3:  GOTO   3E9
0BE4:  MOVLW  7F
0BE5:  ADDWF  51,F
0BE6:  BTFSC  03.0
0BE7:  GOTO   49F
0BE8:  GOTO   3EF
0BE9:  MOVLW  81
0BEA:  SUBWF  51,F
0BEB:  BTFSS  03.0
0BEC:  GOTO   49F
0BED:  BTFSC  03.2
0BEE:  GOTO   49F
0BEF:  MOVF   51,W
0BF0:  MOVWF  77
0BF1:  CLRF   78
0BF2:  CLRF   79
0BF3:  CLRF   7A
0BF4:  CLRF   50
0BF5:  MOVF   46,W
0BF6:  MOVWF  4F
0BF7:  BSF    4F.7
0BF8:  MOVF   47,W
0BF9:  MOVWF  4E
0BFA:  MOVF   48,W
0BFB:  MOVWF  4D
0BFC:  MOVLW  19
0BFD:  MOVWF  51
0BFE:  MOVF   4C,W
0BFF:  SUBWF  4D,F
0C00:  BTFSC  03.0
0C01:  GOTO   412
0C02:  MOVLW  01
0C03:  SUBWF  4E,F
0C04:  BTFSC  03.0
0C05:  GOTO   412
0C06:  SUBWF  4F,F
0C07:  BTFSC  03.0
0C08:  GOTO   412
0C09:  SUBWF  50,F
0C0A:  BTFSC  03.0
0C0B:  GOTO   412
0C0C:  INCF   50,F
0C0D:  INCF   4F,F
0C0E:  INCF   4E,F
0C0F:  MOVF   4C,W
0C10:  ADDWF  4D,F
0C11:  GOTO   444
0C12:  MOVF   4B,W
0C13:  SUBWF  4E,F
0C14:  BTFSC  03.0
0C15:  GOTO   42D
0C16:  MOVLW  01
0C17:  SUBWF  4F,F
0C18:  BTFSC  03.0
0C19:  GOTO   42D
0C1A:  SUBWF  50,F
0C1B:  BTFSC  03.0
0C1C:  GOTO   42D
0C1D:  INCF   50,F
0C1E:  INCF   4F,F
0C1F:  MOVF   4B,W
0C20:  ADDWF  4E,F
0C21:  MOVF   4C,W
0C22:  ADDWF  4D,F
0C23:  BTFSS  03.0
0C24:  GOTO   444
0C25:  INCF   4E,F
0C26:  BTFSS  03.2
0C27:  GOTO   444
0C28:  INCF   4F,F
0C29:  BTFSS  03.2
0C2A:  GOTO   444
0C2B:  INCF   50,F
0C2C:  GOTO   444
0C2D:  MOVF   4A,W
0C2E:  IORLW  80
0C2F:  SUBWF  4F,F
0C30:  BTFSC  03.0
0C31:  GOTO   443
0C32:  MOVLW  01
0C33:  SUBWF  50,F
0C34:  BTFSC  03.0
0C35:  GOTO   443
0C36:  INCF   50,F
0C37:  MOVF   4A,W
0C38:  IORLW  80
0C39:  ADDWF  4F,F
0C3A:  MOVF   4B,W
0C3B:  ADDWF  4E,F
0C3C:  BTFSS  03.0
0C3D:  GOTO   421
0C3E:  INCF   4F,F
0C3F:  BTFSS  03.2
0C40:  GOTO   421
0C41:  INCF   50,F
0C42:  GOTO   421
0C43:  BSF    7A.0
0C44:  DECFSZ 51,F
0C45:  GOTO   447
0C46:  GOTO   452
0C47:  BCF    03.0
0C48:  RLF    4D,F
0C49:  RLF    4E,F
0C4A:  RLF    4F,F
0C4B:  RLF    50,F
0C4C:  BCF    03.0
0C4D:  RLF    7A,F
0C4E:  RLF    79,F
0C4F:  RLF    78,F
0C50:  RLF    52,F
0C51:  GOTO   3FE
0C52:  BTFSS  52.0
0C53:  GOTO   45A
0C54:  BCF    03.0
0C55:  RRF    78,F
0C56:  RRF    79,F
0C57:  RRF    7A,F
0C58:  RRF    52,F
0C59:  GOTO   45D
0C5A:  DECF   77,F
0C5B:  BTFSC  03.2
0C5C:  GOTO   49F
0C5D:  BTFSC  52.7
0C5E:  GOTO   486
0C5F:  BCF    03.0
0C60:  RLF    4D,F
0C61:  RLF    4E,F
0C62:  RLF    4F,F
0C63:  RLF    50,F
0C64:  MOVF   4C,W
0C65:  SUBWF  4D,F
0C66:  BTFSC  03.0
0C67:  GOTO   472
0C68:  MOVLW  01
0C69:  SUBWF  4E,F
0C6A:  BTFSC  03.0
0C6B:  GOTO   472
0C6C:  SUBWF  4F,F
0C6D:  BTFSC  03.0
0C6E:  GOTO   472
0C6F:  SUBWF  50,F
0C70:  BTFSS  03.0
0C71:  GOTO   495
0C72:  MOVF   4B,W
0C73:  SUBWF  4E,F
0C74:  BTFSC  03.0
0C75:  GOTO   47D
0C76:  MOVLW  01
0C77:  SUBWF  4F,F
0C78:  BTFSC  03.0
0C79:  GOTO   47D
0C7A:  SUBWF  50,F
0C7B:  BTFSS  03.0
0C7C:  GOTO   495
0C7D:  MOVF   4A,W
0C7E:  IORLW  80
0C7F:  SUBWF  4F,F
0C80:  BTFSC  03.0
0C81:  GOTO   486
0C82:  MOVLW  01
0C83:  SUBWF  50,F
0C84:  BTFSS  03.0
0C85:  GOTO   495
0C86:  INCF   7A,F
0C87:  BTFSS  03.2
0C88:  GOTO   495
0C89:  INCF   79,F
0C8A:  BTFSS  03.2
0C8B:  GOTO   495
0C8C:  INCF   78,F
0C8D:  BTFSS  03.2
0C8E:  GOTO   495
0C8F:  INCF   77,F
0C90:  BTFSC  03.2
0C91:  GOTO   49F
0C92:  RRF    78,F
0C93:  RRF    79,F
0C94:  RRF    7A,F
0C95:  MOVF   46,W
0C96:  MOVWF  51
0C97:  MOVF   4A,W
0C98:  XORWF  51,F
0C99:  BTFSS  51.7
0C9A:  GOTO   49D
0C9B:  BSF    78.7
0C9C:  GOTO   4A3
0C9D:  BCF    78.7
0C9E:  GOTO   4A3
0C9F:  CLRF   77
0CA0:  CLRF   78
0CA1:  CLRF   79
0CA2:  CLRF   7A
*
0CBB:  MOVLW  80
0CBC:  BTFSC  03.1
0CBD:  XORWF  43,F
0CBE:  CLRF   48
0CBF:  CLRF   49
0CC0:  MOVF   3F,W
0CC1:  MOVWF  47
0CC2:  MOVF   43,W
0CC3:  XORWF  47,F
0CC4:  MOVF   3E,W
0CC5:  BTFSC  03.2
0CC6:  GOTO   5AB
0CC7:  MOVWF  46
0CC8:  MOVWF  77
0CC9:  MOVF   42,W
0CCA:  BTFSC  03.2
0CCB:  GOTO   5B4
0CCC:  SUBWF  46,F
0CCD:  BTFSC  03.2
0CCE:  GOTO   550
0CCF:  BTFSS  03.0
0CD0:  GOTO   50E
0CD1:  MOVF   43,W
0CD2:  MOVWF  4C
0CD3:  BSF    4C.7
0CD4:  MOVF   44,W
0CD5:  MOVWF  4B
0CD6:  MOVF   45,W
0CD7:  MOVWF  4A
0CD8:  CLRF   49
0CD9:  BCF    03.0
0CDA:  RRF    4C,F
0CDB:  RRF    4B,F
0CDC:  RRF    4A,F
0CDD:  RRF    49,F
0CDE:  DECFSZ 46,F
0CDF:  GOTO   4D8
0CE0:  BTFSS  47.7
0CE1:  GOTO   4E5
0CE2:  BSF    48.0
0CE3:  GOTO   5C8
0CE4:  BCF    48.0
0CE5:  BCF    46.0
0CE6:  BSF    48.4
0CE7:  MOVLW  41
0CE8:  MOVWF  04
0CE9:  BCF    03.7
0CEA:  GOTO   5DD
0CEB:  BCF    48.4
0CEC:  BTFSC  47.7
0CED:  GOTO   4F8
0CEE:  BTFSS  46.0
0CEF:  GOTO   503
0CF0:  RRF    4C,F
0CF1:  RRF    4B,F
0CF2:  RRF    4A,F
0CF3:  RRF    49,F
0CF4:  INCF   77,F
0CF5:  BTFSC  03.2
0CF6:  GOTO   5C3
0CF7:  GOTO   503
0CF8:  BTFSC  4C.7
0CF9:  GOTO   506
0CFA:  BCF    03.0
0CFB:  RLF    49,F
0CFC:  RLF    4A,F
0CFD:  RLF    4B,F
0CFE:  RLF    4C,F
0CFF:  DECF   77,F
0D00:  BTFSC  03.2
0D01:  GOTO   5C3
0D02:  GOTO   4F8
0D03:  BSF    48.6
0D04:  GOTO   570
0D05:  BCF    48.6
0D06:  MOVF   3F,W
0D07:  MOVWF  47
0D08:  BTFSS  47.7
0D09:  GOTO   50C
0D0A:  BSF    4C.7
0D0B:  GOTO   5BC
0D0C:  BCF    4C.7
0D0D:  GOTO   5BC
0D0E:  MOVF   42,W
0D0F:  MOVWF  46
0D10:  MOVWF  77
0D11:  MOVF   3E,W
0D12:  SUBWF  46,F
0D13:  MOVF   3F,W
0D14:  MOVWF  4C
0D15:  BSF    4C.7
0D16:  MOVF   40,W
0D17:  MOVWF  4B
0D18:  MOVF   41,W
0D19:  MOVWF  4A
0D1A:  CLRF   49
0D1B:  BCF    03.0
0D1C:  RRF    4C,F
0D1D:  RRF    4B,F
0D1E:  RRF    4A,F
0D1F:  RRF    49,F
0D20:  DECFSZ 46,F
0D21:  GOTO   51A
0D22:  BTFSS  47.7
0D23:  GOTO   527
0D24:  BSF    48.1
0D25:  GOTO   5C8
0D26:  BCF    48.1
0D27:  BCF    46.0
0D28:  BSF    48.5
0D29:  MOVLW  45
0D2A:  MOVWF  04
0D2B:  BCF    03.7
0D2C:  GOTO   5DD
0D2D:  BCF    48.5
0D2E:  BTFSC  47.7
0D2F:  GOTO   53A
0D30:  BTFSS  46.0
0D31:  GOTO   545
0D32:  RRF    4C,F
0D33:  RRF    4B,F
0D34:  RRF    4A,F
0D35:  RRF    49,F
0D36:  INCF   77,F
0D37:  BTFSC  03.2
0D38:  GOTO   5C3
0D39:  GOTO   545
0D3A:  BTFSC  4C.7
0D3B:  GOTO   548
0D3C:  BCF    03.0
0D3D:  RLF    49,F
0D3E:  RLF    4A,F
0D3F:  RLF    4B,F
0D40:  RLF    4C,F
0D41:  DECF   77,F
0D42:  BTFSC  03.2
0D43:  GOTO   5C3
0D44:  GOTO   53A
0D45:  BSF    48.7
0D46:  GOTO   570
0D47:  BCF    48.7
0D48:  MOVF   43,W
0D49:  MOVWF  47
0D4A:  BTFSS  47.7
0D4B:  GOTO   54E
0D4C:  BSF    4C.7
0D4D:  GOTO   5BC
0D4E:  BCF    4C.7
0D4F:  GOTO   5BC
0D50:  MOVF   43,W
0D51:  MOVWF  4C
0D52:  BSF    4C.7
0D53:  MOVF   44,W
0D54:  MOVWF  4B
0D55:  MOVF   45,W
0D56:  MOVWF  4A
0D57:  BTFSS  47.7
0D58:  GOTO   55D
0D59:  BCF    4C.7
0D5A:  BSF    48.2
0D5B:  GOTO   5C8
0D5C:  BCF    48.2
0D5D:  CLRF   49
0D5E:  BCF    46.0
0D5F:  MOVLW  41
0D60:  MOVWF  04
0D61:  BCF    03.7
0D62:  GOTO   5DD
0D63:  BTFSC  47.7
0D64:  GOTO   586
0D65:  MOVF   3F,W
0D66:  MOVWF  47
0D67:  BTFSS  46.0
0D68:  GOTO   570
0D69:  RRF    4C,F
0D6A:  RRF    4B,F
0D6B:  RRF    4A,F
0D6C:  RRF    49,F
0D6D:  INCF   77,F
0D6E:  BTFSC  03.2
0D6F:  GOTO   5C3
0D70:  BTFSS  49.7
0D71:  GOTO   581
0D72:  INCF   4A,F
0D73:  BTFSS  03.2
0D74:  GOTO   581
0D75:  INCF   4B,F
0D76:  BTFSS  03.2
0D77:  GOTO   581
0D78:  INCF   4C,F
0D79:  BTFSS  03.2
0D7A:  GOTO   581
0D7B:  RRF    4C,F
0D7C:  RRF    4B,F
0D7D:  RRF    4A,F
0D7E:  INCF   77,F
0D7F:  BTFSC  03.2
0D80:  GOTO   5C3
0D81:  BTFSC  48.6
0D82:  GOTO   505
0D83:  BTFSC  48.7
0D84:  GOTO   547
0D85:  GOTO   5A5
0D86:  MOVLW  80
0D87:  XORWF  4C,F
0D88:  BTFSS  4C.7
0D89:  GOTO   58E
0D8A:  GOTO   5C8
0D8B:  MOVF   43,W
0D8C:  MOVWF  47
0D8D:  GOTO   59B
0D8E:  MOVF   3F,W
0D8F:  MOVWF  47
0D90:  MOVF   4C,F
0D91:  BTFSS  03.2
0D92:  GOTO   59B
0D93:  MOVF   4B,F
0D94:  BTFSS  03.2
0D95:  GOTO   59B
0D96:  MOVF   4A,F
0D97:  BTFSS  03.2
0D98:  GOTO   59B
0D99:  CLRF   77
0D9A:  GOTO   5BC
0D9B:  BTFSC  4C.7
0D9C:  GOTO   5A5
0D9D:  BCF    03.0
0D9E:  RLF    49,F
0D9F:  RLF    4A,F
0DA0:  RLF    4B,F
0DA1:  RLF    4C,F
0DA2:  DECFSZ 77,F
0DA3:  GOTO   59B
0DA4:  GOTO   5C3
0DA5:  BTFSS  47.7
0DA6:  GOTO   5A9
0DA7:  BSF    4C.7
0DA8:  GOTO   5BC
0DA9:  BCF    4C.7
0DAA:  GOTO   5BC
0DAB:  MOVF   42,W
0DAC:  MOVWF  77
0DAD:  MOVF   43,W
0DAE:  MOVWF  4C
0DAF:  MOVF   44,W
0DB0:  MOVWF  4B
0DB1:  MOVF   45,W
0DB2:  MOVWF  4A
0DB3:  GOTO   5BC
0DB4:  MOVF   3E,W
0DB5:  MOVWF  77
0DB6:  MOVF   3F,W
0DB7:  MOVWF  4C
0DB8:  MOVF   40,W
0DB9:  MOVWF  4B
0DBA:  MOVF   41,W
0DBB:  MOVWF  4A
0DBC:  MOVF   4C,W
0DBD:  MOVWF  78
0DBE:  MOVF   4B,W
0DBF:  MOVWF  79
0DC0:  MOVF   4A,W
0DC1:  MOVWF  7A
0DC2:  GOTO   5FB
0DC3:  CLRF   77
0DC4:  CLRF   78
0DC5:  CLRF   79
0DC6:  CLRF   7A
0DC7:  GOTO   5FB
0DC8:  CLRF   49
0DC9:  COMF   4A,F
0DCA:  COMF   4B,F
0DCB:  COMF   4C,F
0DCC:  COMF   49,F
0DCD:  INCF   49,F
0DCE:  BTFSS  03.2
0DCF:  GOTO   5D6
0DD0:  INCF   4A,F
0DD1:  BTFSS  03.2
0DD2:  GOTO   5D6
0DD3:  INCF   4B,F
0DD4:  BTFSC  03.2
0DD5:  INCF   4C,F
0DD6:  BTFSC  48.0
0DD7:  GOTO   4E4
0DD8:  BTFSC  48.1
0DD9:  GOTO   526
0DDA:  BTFSC  48.2
0DDB:  GOTO   55C
0DDC:  GOTO   58B
0DDD:  MOVF   00,W
0DDE:  ADDWF  4A,F
0DDF:  BTFSS  03.0
0DE0:  GOTO   5E7
0DE1:  INCF   4B,F
0DE2:  BTFSS  03.2
0DE3:  GOTO   5E7
0DE4:  INCF   4C,F
0DE5:  BTFSC  03.2
0DE6:  BSF    46.0
0DE7:  DECF   04,F
0DE8:  MOVF   00,W
0DE9:  ADDWF  4B,F
0DEA:  BTFSS  03.0
0DEB:  GOTO   5EF
0DEC:  INCF   4C,F
0DED:  BTFSC  03.2
0DEE:  BSF    46.0
0DEF:  DECF   04,F
0DF0:  MOVF   00,W
0DF1:  BTFSS  00.7
0DF2:  XORLW  80
0DF3:  ADDWF  4C,F
0DF4:  BTFSC  03.0
0DF5:  BSF    46.0
0DF6:  BTFSC  48.4
0DF7:  GOTO   4EB
0DF8:  BTFSC  48.5
0DF9:  GOTO   52D
0DFA:  GOTO   563
0DFB:  BCF    0A.3
0DFC:  BSF    0A.4
0DFD:  GOTO   276 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay(clock=4000000) //osilatör hýzý ayarlanýyor   
*
00B1:  MOVLW  41
00B2:  MOVWF  04
00B3:  BCF    03.7
00B4:  MOVF   00,W
00B5:  BTFSC  03.2
00B6:  GOTO   0C5
00B7:  MOVLW  01
00B8:  MOVWF  78
00B9:  CLRF   77
00BA:  DECFSZ 77,F
00BB:  GOTO   0BA
00BC:  DECFSZ 78,F
00BD:  GOTO   0B9
00BE:  MOVLW  4A
00BF:  MOVWF  77
00C0:  DECFSZ 77,F
00C1:  GOTO   0C0
00C2:  GOTO   0C3
00C3:  DECFSZ 00,F
00C4:  GOTO   0B7
00C5:  RETURN
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "ds18b20.c" //ds18b20'ye ait fonksiyonlar programa eklendi 
.................... #define ONE_WIRE_PIN PIN_a0 
.................... void onewire_reset()  
....................  
.................... { 
.................... output_low(ONE_WIRE_PIN); 
*
06DB:  BSF    03.5
06DC:  BCF    05.0
06DD:  BCF    03.5
06DE:  BCF    05.0
.................... delay_us( 500 ); //1-wire resetleme için sýfýra çekilir 
06DF:  MOVLW  A6
06E0:  MOVWF  77
06E1:  DECFSZ 77,F
06E2:  GOTO   6E1
06E3:  NOP
.................... output_float(ONE_WIRE_PIN); //1-wire bir yapýlýr 
06E4:  BSF    03.5
06E5:  BSF    05.0
.................... delay_us( 500 ); // sensörün hazýrlanmasý için beklenir. 
06E6:  MOVLW  A6
06E7:  MOVWF  77
06E8:  DECFSZ 77,F
06E9:  GOTO   6E8
06EA:  NOP
.................... output_float(ONE_WIRE_PIN); 
06EB:  BSF    05.0
06EC:  BCF    03.5
06ED:  RETURN
.................... }  
....................  
.................... void onewire_write(int data) 
.................... { 
.................... int count; 
.................... for (count=0; count<8; ++count) 
06EE:  CLRF   42
06EF:  MOVF   42,W
06F0:  SUBLW  07
06F1:  BTFSS  03.0
06F2:  GOTO   70B
.................... { 
.................... output_low(ONE_WIRE_PIN); 
06F3:  BSF    03.5
06F4:  BCF    05.0
06F5:  BCF    03.5
06F6:  BCF    05.0
.................... delay_us( 2 ); // Sensöre yazma iþlemine baþlamak için  1-wire sýfýra çekilir. 
06F7:  GOTO   6F8
.................... output_bit(ONE_WIRE_PIN, shift_right(&data,1,0)); // yazýlacak bilgi 1-wire'da 
06F8:  BCF    03.0
06F9:  RRF    41,F
06FA:  BTFSC  03.0
06FB:  GOTO   6FE
06FC:  BCF    05.0
06FD:  GOTO   6FF
06FE:  BSF    05.0
06FF:  BSF    03.5
0700:  BCF    05.0
.................... delay_us( 60 ); // Yazma iþlemi zamaný doldurulur. 
0701:  MOVLW  13
0702:  MOVWF  77
0703:  DECFSZ 77,F
0704:  GOTO   703
0705:  GOTO   706
.................... output_float(ONE_WIRE_PIN); // 1-wire bir yapýlýr, 
0706:  BSF    05.0
.................... delay_us( 2 ); // 1us'den fazla beklenir. 
0707:  GOTO   708
0708:  BCF    03.5
0709:  INCF   42,F
070A:  GOTO   6EF
.................... } 
070B:  RETURN
.................... }  
....................  
.................... int onewire_read() 
.................... { 
.................... int count, data; 
.................... for (count=0; count<8; ++count) 
070C:  CLRF   41
070D:  MOVF   41,W
070E:  SUBLW  07
070F:  BTFSS  03.0
0710:  GOTO   72C
.................... { 
.................... output_low(ONE_WIRE_PIN); 
0711:  BSF    03.5
0712:  BCF    05.0
0713:  BCF    03.5
0714:  BCF    05.0
.................... delay_us( 2 ); //Sensördem okuma iþlemi içinl 1-wire sýfýra çekilir. 
0715:  GOTO   716
.................... output_float(ONE_WIRE_PIN); //1-wire bir yapýlýr, 
0716:  BSF    03.5
0717:  BSF    05.0
.................... delay_us( 8 ); // Sensörün kendine gelmesi beklenir, 
0718:  MOVLW  02
0719:  MOVWF  77
071A:  DECFSZ 77,F
071B:  GOTO   71A
071C:  NOP
.................... shift_right(&data,1,input(ONE_WIRE_PIN)); // sonuc bilgisi alýnýr. 
071D:  BSF    05.0
071E:  BCF    03.5
071F:  BTFSC  05.0
0720:  GOTO   723
0721:  BCF    03.0
0722:  GOTO   724
0723:  BSF    03.0
0724:  RRF    42,F
.................... delay_us( 120 ); //Okuma iþlemi zamaný doldurulur. 
0725:  MOVLW  27
0726:  MOVWF  77
0727:  DECFSZ 77,F
0728:  GOTO   727
0729:  GOTO   72A
072A:  INCF   41,F
072B:  GOTO   70D
.................... } 
.................... return( data ); 
072C:  MOVF   42,W
072D:  MOVWF  78
072E:  RETURN
.................... }  
....................  
.................... float ds1820_read() 
*
0B6B:  CLRF   38
.................... { 
.................... int8 busy=0, temp1, temp2; 
.................... signed int16 temp3; 
.................... float result; 
.................... onewire_reset(); 
0B6C:  BCF    0A.3
0B6D:  CALL   6DB
0B6E:  BSF    0A.3
.................... onewire_write(0xCC); 
0B6F:  MOVLW  CC
0B70:  MOVWF  41
0B71:  BCF    0A.3
0B72:  CALL   6EE
0B73:  BSF    0A.3
.................... onewire_write(0x44); 
0B74:  MOVLW  44
0B75:  MOVWF  41
0B76:  BCF    0A.3
0B77:  CALL   6EE
0B78:  BSF    0A.3
.................... while (busy == 0) 
0B79:  MOVF   38,F
0B7A:  BTFSS  03.2
0B7B:  GOTO   382
.................... busy = onewire_read(); 
0B7C:  BCF    0A.3
0B7D:  CALL   70C
0B7E:  BSF    0A.3
0B7F:  MOVF   78,W
0B80:  MOVWF  38
0B81:  GOTO   379
.................... onewire_reset(); 
0B82:  BCF    0A.3
0B83:  CALL   6DB
0B84:  BSF    0A.3
.................... onewire_write(0xCC); 
0B85:  MOVLW  CC
0B86:  MOVWF  41
0B87:  BCF    0A.3
0B88:  CALL   6EE
0B89:  BSF    0A.3
.................... onewire_write(0xBE); 
0B8A:  MOVLW  BE
0B8B:  MOVWF  41
0B8C:  BCF    0A.3
0B8D:  CALL   6EE
0B8E:  BSF    0A.3
.................... temp1 = onewire_read(); 
0B8F:  BCF    0A.3
0B90:  CALL   70C
0B91:  BSF    0A.3
0B92:  MOVF   78,W
0B93:  MOVWF  39
.................... temp2 = onewire_read(); 
0B94:  BCF    0A.3
0B95:  CALL   70C
0B96:  BSF    0A.3
0B97:  MOVF   78,W
0B98:  MOVWF  3A
.................... temp3 = make16(temp2, temp1); 
0B99:  MOVF   3A,W
0B9A:  MOVWF  3C
0B9B:  MOVF   39,W
0B9C:  MOVWF  3B
.................... result = (float) temp3 / 16.0; 
0B9D:  MOVF   3C,W
0B9E:  MOVWF  42
0B9F:  MOVF   3B,W
0BA0:  MOVWF  41
*
0BC5:  MOVF   7A,W
0BC6:  MOVWF  44
0BC7:  MOVF   79,W
0BC8:  MOVWF  43
0BC9:  MOVF   78,W
0BCA:  MOVWF  42
0BCB:  MOVF   77,W
0BCC:  MOVWF  41
0BCD:  MOVF   44,W
0BCE:  MOVWF  48
0BCF:  MOVF   43,W
0BD0:  MOVWF  47
0BD1:  MOVF   42,W
0BD2:  MOVWF  46
0BD3:  MOVF   41,W
0BD4:  MOVWF  45
0BD5:  CLRF   4C
0BD6:  CLRF   4B
0BD7:  CLRF   4A
0BD8:  MOVLW  83
0BD9:  MOVWF  49
*
0CA3:  MOVF   7A,W
0CA4:  MOVWF  40
0CA5:  MOVF   79,W
0CA6:  MOVWF  3F
0CA7:  MOVF   78,W
0CA8:  MOVWF  3E
0CA9:  MOVF   77,W
0CAA:  MOVWF  3D
.................... delay_ms(200); 
0CAB:  MOVLW  C8
0CAC:  MOVWF  41
0CAD:  BCF    0A.3
0CAE:  CALL   0B1
0CAF:  BSF    0A.3
.................... return(result); 
0CB0:  MOVF   3D,W
0CB1:  MOVWF  77
0CB2:  MOVF   3E,W
0CB3:  MOVWF  78
0CB4:  MOVF   3F,W
0CB5:  MOVWF  79
0CB6:  MOVF   40,W
0CB7:  MOVWF  7A
0CB8:  BCF    0A.3
0CB9:  BSF    0A.4
0CBA:  GOTO   255 (RETURN)
.................... } 
....................  
.................... #include <DS1302.c> //ds1302'ye ait fonksiyonlar programa eklendi 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_B1 
.................... #define RTC_IO   PIN_B3 
.................... #define RTC_RST  PIN_B2 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0020:  CLRF   40
0021:  MOVF   40,W
0022:  SUBLW  07
0023:  BTFSS  03.0
0024:  GOTO   03F
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0025:  BCF    03.0
0026:  RRF    3F,F
0027:  BTFSC  03.0
0028:  GOTO   02B
0029:  BCF    07.2
002A:  GOTO   02C
002B:  BSF    07.2
002C:  BCF    20.2
002D:  MOVF   20,W
002E:  BSF    03.5
002F:  MOVWF  07
....................       output_high(RTC_SCLK); 
0030:  BCF    03.5
0031:  BCF    20.1
0032:  MOVF   20,W
0033:  BSF    03.5
0034:  MOVWF  07
0035:  BCF    03.5
0036:  BSF    07.1
....................       output_low(RTC_SCLK); 
0037:  BCF    20.1
0038:  MOVF   20,W
0039:  BSF    03.5
003A:  MOVWF  07
003B:  BCF    03.5
003C:  BCF    07.1
003D:  INCF   40,F
003E:  GOTO   021
....................    } 
003F:  RETURN
.................... } 
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0040:  BCF    20.0
0041:  MOVF   20,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BSF    07.0
....................    write_ds1302_byte(cmd); 
0046:  MOVF   39,W
0047:  MOVWF  3F
0048:  CALL   020
....................    write_ds1302_byte(data); 
0049:  MOVF   3A,W
004A:  MOVWF  3F
004B:  CALL   020
....................    output_low(RTC_RST); 
004C:  BCF    20.0
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  BCF    03.5
0051:  BCF    07.0
0052:  RETURN
.................... } 
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
0053:  BCF    20.0
0054:  MOVF   20,W
0055:  BSF    03.5
0056:  MOVWF  07
0057:  BCF    03.5
0058:  BSF    07.0
....................    write_ds1302_byte(cmd); 
0059:  MOVF   3C,W
005A:  MOVWF  3F
005B:  CALL   020
....................     
....................    input(RTC_IO); 
005C:  BSF    20.2
005D:  MOVF   20,W
005E:  BSF    03.5
005F:  MOVWF  07
....................    delay_us(1); 
0060:  NOP
....................           
....................    for(i=0;i<=7;++i) { 
0061:  BCF    03.5
0062:  CLRF   3D
0063:  MOVF   3D,W
0064:  SUBLW  07
0065:  BTFSS  03.0
0066:  GOTO   082
....................       shift_right(&data,1,input(RTC_IO)); 
0067:  BSF    20.2
0068:  MOVF   20,W
0069:  BSF    03.5
006A:  MOVWF  07
006B:  BCF    03.5
006C:  BTFSC  07.2
006D:  GOTO   070
006E:  BCF    03.0
006F:  GOTO   071
0070:  BSF    03.0
0071:  RRF    3E,F
....................       output_high(RTC_SCLK); 
0072:  BCF    20.1
0073:  MOVF   20,W
0074:  BSF    03.5
0075:  MOVWF  07
0076:  BCF    03.5
0077:  BSF    07.1
....................       delay_us(2); 
0078:  GOTO   079
....................       output_low(RTC_SCLK); 
0079:  BCF    20.1
007A:  MOVF   20,W
007B:  BSF    03.5
007C:  MOVWF  07
007D:  BCF    03.5
007E:  BCF    07.1
....................       delay_us(2); 
007F:  GOTO   080
0080:  INCF   3D,F
0081:  GOTO   063
....................    } 
....................    output_low(RTC_RST); 
0082:  BCF    20.0
0083:  MOVF   20,W
0084:  BSF    03.5
0085:  MOVWF  07
0086:  BCF    03.5
0087:  BCF    07.0
....................  
....................    return(data); 
0088:  MOVF   3E,W
0089:  MOVWF  78
008A:  RETURN
.................... } 
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
008B:  BCF    20.0
008C:  MOVF   20,W
008D:  BSF    03.5
008E:  MOVWF  07
008F:  BCF    03.5
0090:  BCF    07.0
....................    delay_us(2); 
0091:  GOTO   092
....................    output_low(RTC_SCLK); 
0092:  BCF    20.1
0093:  MOVF   20,W
0094:  BSF    03.5
0095:  MOVWF  07
0096:  BCF    03.5
0097:  BCF    07.1
....................    write_ds1302(0x8e,0); 
0098:  MOVLW  8E
0099:  MOVWF  39
009A:  CLRF   3A
009B:  CALL   040
....................    write_ds1302(0x90,0xa4); 
009C:  MOVLW  90
009D:  MOVWF  39
009E:  MOVLW  A4
009F:  MOVWF  3A
00A0:  CALL   040
....................    x=read_ds1302(0x81); 
00A1:  MOVLW  81
00A2:  MOVWF  3C
00A3:  CALL   053
00A4:  MOVF   78,W
00A5:  MOVWF  38
....................    if((x & 0x80)!=0) 
00A6:  MOVF   38,W
00A7:  ANDLW  80
00A8:  BTFSC  03.2
00A9:  GOTO   0AE
....................      write_ds1302(0x80,0); 
00AA:  MOVLW  80
00AB:  MOVWF  39
00AC:  CLRF   3A
00AD:  CALL   040
00AE:  BCF    0A.3
00AF:  BSF    0A.4
00B0:  GOTO   02A (RETURN)
.................... } 
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
0221:  MOVF   38,W
0222:  MOVWF  3B
0223:  MOVLW  0A
0224:  MOVWF  3C
0225:  CALL   166
0226:  MOVF   78,W
0227:  MOVWF  39
....................    nibl=data-(nibh*10); 
0228:  MOVF   39,W
0229:  MOVWF  41
022A:  MOVLW  0A
022B:  MOVWF  42
022C:  CALL   126
022D:  MOVF   78,W
022E:  SUBWF  38,W
022F:  MOVWF  3A
....................  
....................    return((nibh<<4)|nibl); 
0230:  SWAPF  39,W
0231:  MOVWF  77
0232:  MOVLW  F0
0233:  ANDWF  77,F
0234:  MOVF   77,W
0235:  IORWF  3A,W
0236:  MOVWF  78
0237:  RETURN
.................... } 
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
014B:  MOVF   3D,W
014C:  MOVWF  3E
....................    data=(i>>4)*10; 
014D:  SWAPF  3E,W
014E:  MOVWF  77
014F:  MOVLW  0F
0150:  ANDWF  77,F
0151:  MOVF   77,W
0152:  MOVWF  40
0153:  MOVWF  41
0154:  MOVLW  0A
0155:  MOVWF  42
0156:  CALL   126
0157:  MOVF   78,W
0158:  MOVWF  3D
....................    data=data+(i<<4>>4); 
0159:  SWAPF  3E,W
015A:  MOVWF  77
015B:  MOVLW  F0
015C:  ANDWF  77,F
015D:  MOVF   77,W
015E:  SWAPF  77,F
015F:  MOVLW  0F
0160:  ANDWF  77,F
0161:  MOVF   77,W
0162:  ADDWF  3D,F
....................  
....................    return data; 
0163:  MOVF   3D,W
0164:  MOVWF  78
0165:  RETURN
.................... } 
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
....................    write_ds1302(0x88,get_bcd(mth)); 
....................    write_ds1302(0x8c,get_bcd(year)); 
....................    write_ds1302(0x8a,get_bcd(dow)); 
....................    write_ds1302(0x84,get_bcd(hr)); 
....................    write_ds1302(0x82,get_bcd(min)); 
....................    write_ds1302(0x80,get_bcd(0)); 
.................... } 
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
0488:  MOVLW  87
0489:  MOVWF  3C
048A:  CALL   053
048B:  MOVF   78,W
048C:  MOVWF  38
048D:  MOVWF  3D
048E:  CALL   14B
048F:  MOVF   78,W
0490:  MOVWF  24
*
1199:  MOVLW  87
119A:  MOVWF  3C
119B:  BCF    0A.4
119C:  CALL   053
119D:  BSF    0A.4
119E:  MOVF   78,W
119F:  MOVWF  38
11A0:  MOVWF  3D
11A1:  BCF    0A.4
11A2:  CALL   14B
11A3:  BSF    0A.4
11A4:  MOVF   78,W
11A5:  MOVWF  24
....................    mth = rm_bcd(read_ds1302(0x89)); 
*
0491:  MOVLW  89
0492:  MOVWF  3C
0493:  CALL   053
0494:  MOVF   78,W
0495:  MOVWF  38
0496:  MOVWF  3D
0497:  CALL   14B
0498:  MOVF   78,W
0499:  MOVWF  25
*
11A6:  MOVLW  89
11A7:  MOVWF  3C
11A8:  BCF    0A.4
11A9:  CALL   053
11AA:  BSF    0A.4
11AB:  MOVF   78,W
11AC:  MOVWF  38
11AD:  MOVWF  3D
11AE:  BCF    0A.4
11AF:  CALL   14B
11B0:  BSF    0A.4
11B1:  MOVF   78,W
11B2:  MOVWF  25
....................    year = rm_bcd(read_ds1302(0x8d)); 
*
049A:  MOVLW  8D
049B:  MOVWF  3C
049C:  CALL   053
049D:  MOVF   78,W
049E:  MOVWF  38
049F:  MOVWF  3D
04A0:  CALL   14B
04A1:  MOVF   78,W
04A2:  MOVWF  26
*
11B3:  MOVLW  8D
11B4:  MOVWF  3C
11B5:  BCF    0A.4
11B6:  CALL   053
11B7:  BSF    0A.4
11B8:  MOVF   78,W
11B9:  MOVWF  38
11BA:  MOVWF  3D
11BB:  BCF    0A.4
11BC:  CALL   14B
11BD:  BSF    0A.4
11BE:  MOVF   78,W
11BF:  MOVWF  26
....................    dow = rm_bcd(read_ds1302(0x8b)); 
*
04A3:  MOVLW  8B
04A4:  MOVWF  3C
04A5:  CALL   053
04A6:  MOVF   78,W
04A7:  MOVWF  38
04A8:  MOVWF  3D
04A9:  CALL   14B
04AA:  MOVF   78,W
04AB:  MOVWF  27
*
11C0:  MOVLW  8B
11C1:  MOVWF  3C
11C2:  BCF    0A.4
11C3:  CALL   053
11C4:  BSF    0A.4
11C5:  MOVF   78,W
11C6:  MOVWF  38
11C7:  MOVWF  3D
11C8:  BCF    0A.4
11C9:  CALL   14B
11CA:  BSF    0A.4
11CB:  MOVF   78,W
11CC:  MOVWF  27
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
02EB:  MOVLW  85
02EC:  MOVWF  3C
02ED:  CALL   053
02EE:  MOVF   78,W
02EF:  MOVWF  38
02F0:  MOVWF  3D
02F1:  CALL   14B
02F2:  MOVF   78,W
02F3:  MOVWF  23
*
1058:  MOVLW  85
1059:  MOVWF  3C
105A:  BCF    0A.4
105B:  CALL   053
105C:  BSF    0A.4
105D:  MOVF   78,W
105E:  MOVWF  38
105F:  MOVWF  3D
1060:  BCF    0A.4
1061:  CALL   14B
1062:  BSF    0A.4
1063:  MOVF   78,W
1064:  MOVWF  23
*
116C:  MOVLW  85
116D:  MOVWF  3C
116E:  BCF    0A.4
116F:  CALL   053
1170:  BSF    0A.4
1171:  MOVF   78,W
1172:  MOVWF  38
1173:  MOVWF  3D
1174:  BCF    0A.4
1175:  CALL   14B
1176:  BSF    0A.4
1177:  MOVF   78,W
1178:  MOVWF  23
*
12B4:  MOVLW  85
12B5:  MOVWF  3C
12B6:  BCF    0A.4
12B7:  CALL   053
12B8:  BSF    0A.4
12B9:  MOVF   78,W
12BA:  MOVWF  38
12BB:  MOVWF  3D
12BC:  BCF    0A.4
12BD:  CALL   14B
12BE:  BSF    0A.4
12BF:  MOVF   78,W
12C0:  MOVWF  23
....................    min = rm_bcd(read_ds1302(0x83)); 
*
02F4:  MOVLW  83
02F5:  MOVWF  3C
02F6:  CALL   053
02F7:  MOVF   78,W
02F8:  MOVWF  38
02F9:  MOVWF  3D
02FA:  CALL   14B
02FB:  MOVF   78,W
02FC:  MOVWF  22
*
1065:  MOVLW  83
1066:  MOVWF  3C
1067:  BCF    0A.4
1068:  CALL   053
1069:  BSF    0A.4
106A:  MOVF   78,W
106B:  MOVWF  38
106C:  MOVWF  3D
106D:  BCF    0A.4
106E:  CALL   14B
106F:  BSF    0A.4
1070:  MOVF   78,W
1071:  MOVWF  22
*
1179:  MOVLW  83
117A:  MOVWF  3C
117B:  BCF    0A.4
117C:  CALL   053
117D:  BSF    0A.4
117E:  MOVF   78,W
117F:  MOVWF  38
1180:  MOVWF  3D
1181:  BCF    0A.4
1182:  CALL   14B
1183:  BSF    0A.4
1184:  MOVF   78,W
1185:  MOVWF  22
*
12C1:  MOVLW  83
12C2:  MOVWF  3C
12C3:  BCF    0A.4
12C4:  CALL   053
12C5:  BSF    0A.4
12C6:  MOVF   78,W
12C7:  MOVWF  38
12C8:  MOVWF  3D
12C9:  BCF    0A.4
12CA:  CALL   14B
12CB:  BSF    0A.4
12CC:  MOVF   78,W
12CD:  MOVWF  22
....................    sec = rm_bcd(read_ds1302(0x81)); 
*
02FD:  MOVLW  81
02FE:  MOVWF  3C
02FF:  CALL   053
0300:  MOVF   78,W
0301:  MOVWF  38
0302:  MOVWF  3D
0303:  CALL   14B
0304:  MOVF   78,W
0305:  MOVWF  21
*
1072:  MOVLW  81
1073:  MOVWF  3C
1074:  BCF    0A.4
1075:  CALL   053
1076:  BSF    0A.4
1077:  MOVF   78,W
1078:  MOVWF  38
1079:  MOVWF  3D
107A:  BCF    0A.4
107B:  CALL   14B
107C:  BSF    0A.4
107D:  MOVF   78,W
107E:  MOVWF  21
*
1186:  MOVLW  81
1187:  MOVWF  3C
1188:  BCF    0A.4
1189:  CALL   053
118A:  BSF    0A.4
118B:  MOVF   78,W
118C:  MOVWF  38
118D:  MOVWF  3D
118E:  BCF    0A.4
118F:  CALL   14B
1190:  BSF    0A.4
1191:  MOVF   78,W
1192:  MOVWF  21
*
12CE:  MOVLW  81
12CF:  MOVWF  3C
12D0:  BCF    0A.4
12D1:  CALL   053
12D2:  BSF    0A.4
12D3:  MOVF   78,W
12D4:  MOVWF  38
12D5:  MOVWF  3D
12D6:  BCF    0A.4
12D7:  CALL   14B
12D8:  BSF    0A.4
12D9:  MOVF   78,W
12DA:  MOVWF  21
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
....................  
.................... #define set pin_c4 
.................... #define mod pin_c5 
.................... #define arttir pin_c6 
.................... #define azalt pin_c7 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... byte saniye,dakika,saat,gun,ay,yil,haftanin_gunu; 
.................... char display1_onlar,display1_birler,display2_onlar,display2_birler,display3_onlar,display3_birler;  
....................  
.................... const int digit[10]={0x77,0x41,0x3B,0x5B,0x4D,0x5E,0x7E,0x43,0x7F,0x5F};//ortak anot 
.................... const int digit1[10]={0xF7,0xC1,0xBB,0xDB,0xCD,0xDE,0xFE,0xC3,0xFF,0xDF};//ortak anot 
.................... unsigned int i,j,k;  // döngü sayacý 
.................... unsigned int maske=0x80;   // gönderilecek bilginin bitlerini öðrenmek için kullanýlan maske bilgisi. 
.................... int alarm_sira; 
.................... int set_degeri=0; // 1=saat 2=tarih 
.................... int mod_degeri=0; // 1=saat,gun 2=dakika,ay 3=saniye,yýl 
.................... unsigned long int bilgi; //sýcaklýk bilgisi 
.................... int sicaklik_ekrani=0; //1=aktif, 0=pasif    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... void display_goster(unsigned char bilgi){ 
....................  
....................          for (i=0;i<8;i++) 
*
00D2:  CLRF   2E
00D3:  MOVF   2E,W
00D4:  SUBLW  07
00D5:  BTFSS  03.0
00D6:  GOTO   0F4
....................          { 
....................             if(bilgi&maske) output_high(DS); //bilginin ilk biti 1 ise seri bilginin ilk biti olarak 1 ver. 
00D7:  MOVF   39,W
00D8:  ANDWF  31,W
00D9:  BTFSC  03.2
00DA:  GOTO   0E0
00DB:  BSF    03.5
00DC:  BCF    06.1
00DD:  BCF    03.5
00DE:  BSF    06.1
00DF:  GOTO   0E4
....................  
....................             else output_low(DS); 
00E0:  BSF    03.5
00E1:  BCF    06.1
00E2:  BCF    03.5
00E3:  BCF    06.1
....................             maske>>=1;  //Maskeyi ikinci-üçüncü... bite ayarlamak için kaydýr. 
00E4:  BCF    03.0
00E5:  RRF    31,F
....................             output_high(SH_CP); // shift register clock giriþini ver. 
00E6:  BSF    03.5
00E7:  BCF    06.0
00E8:  BCF    03.5
00E9:  BSF    06.0
....................             delay_us(2); 
00EA:  GOTO   0EB
....................             output_low(SH_CP);// shift register clock giriþini kapa. 
00EB:  BSF    03.5
00EC:  BCF    06.0
00ED:  BCF    03.5
00EE:  BCF    06.0
....................             delay_ms(1); 
00EF:  MOVLW  01
00F0:  MOVWF  41
00F1:  CALL   0B1
00F2:  INCF   2E,F
00F3:  GOTO   0D3
....................          } 
....................             maske=0x80; //maskeyi eski haline getir. 
00F4:  MOVLW  80
00F5:  MOVWF  31
00F6:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void ekran(){ 
....................        display_goster(digit[display3_birler]); 
00F7:  MOVF   2D,W
00F8:  CALL   004
00F9:  MOVWF  38
00FA:  MOVWF  39
00FB:  CALL   0D2
....................        display_goster(digit[display3_onlar]); 
00FC:  MOVF   2C,W
00FD:  CALL   004
00FE:  MOVWF  38
00FF:  MOVWF  39
0100:  CALL   0D2
....................        display_goster(digit[display2_birler]); 
0101:  MOVF   2B,W
0102:  CALL   004
0103:  MOVWF  38
0104:  MOVWF  39
0105:  CALL   0D2
....................        display_goster(digit[display2_onlar]); 
0106:  MOVF   2A,W
0107:  CALL   004
0108:  MOVWF  38
0109:  MOVWF  39
010A:  CALL   0D2
....................        display_goster(digit[display1_birler]); 
010B:  MOVF   29,W
010C:  CALL   004
010D:  MOVWF  38
010E:  MOVWF  39
010F:  CALL   0D2
....................        display_goster(digit[display1_onlar]); 
0110:  MOVF   28,W
0111:  CALL   004
0112:  MOVWF  38
0113:  MOVWF  39
0114:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
0115:  BSF    03.5
0116:  BCF    06.2
0117:  BCF    03.5
0118:  BSF    06.2
....................        delay_us(30); 
0119:  MOVLW  09
011A:  MOVWF  77
011B:  DECFSZ 77,F
011C:  GOTO   11B
011D:  GOTO   11E
....................        output_low(ST_CP); 
011E:  BSF    03.5
011F:  BCF    06.2
0120:  BCF    03.5
0121:  BCF    06.2
....................        delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  41
0124:  CALL   0B1
0125:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void gecis_animasyon() 
.................... { 
....................        display_goster(0x1A); 
*
02B6:  MOVLW  1A
02B7:  MOVWF  39
02B8:  CALL   0D2
....................        display_goster(0x1A); 
02B9:  MOVLW  1A
02BA:  MOVWF  39
02BB:  CALL   0D2
....................        display_goster(0x1A); 
02BC:  MOVLW  1A
02BD:  MOVWF  39
02BE:  CALL   0D2
....................        display_goster(0x1A); 
02BF:  MOVLW  1A
02C0:  MOVWF  39
02C1:  CALL   0D2
....................        display_goster(0x1A); 
02C2:  MOVLW  1A
02C3:  MOVWF  39
02C4:  CALL   0D2
....................        display_goster(0x1A); 
02C5:  MOVLW  1A
02C6:  MOVWF  39
02C7:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
02C8:  BSF    03.5
02C9:  BCF    06.2
02CA:  BCF    03.5
02CB:  BSF    06.2
....................        delay_us(2); 
02CC:  GOTO   2CD
....................        output_low(ST_CP); 
02CD:  BSF    03.5
02CE:  BCF    06.2
02CF:  BCF    03.5
02D0:  BCF    06.2
....................        delay_ms(50); 
02D1:  MOVLW  32
02D2:  MOVWF  41
02D3:  CALL   0B1
02D4:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void saat_basi(){ 
.................... if ((dakika==0)&(saniye==0)){ 
*
0632:  MOVF   22,F
0633:  BTFSC  03.2
0634:  GOTO   637
0635:  MOVLW  00
0636:  GOTO   638
0637:  MOVLW  01
0638:  MOVWF  38
0639:  MOVF   21,F
063A:  BTFSC  03.2
063B:  GOTO   63E
063C:  MOVLW  00
063D:  GOTO   63F
063E:  MOVLW  01
063F:  ANDWF  38,W
0640:  BTFSC  03.2
0641:  GOTO   650
.................... output_high(buzzer);delay_ms(200);  output_low(buzzer);delay_ms(200); 
0642:  BSF    03.5
0643:  BCF    06.4
0644:  BCF    03.5
0645:  BSF    06.4
0646:  MOVLW  C8
0647:  MOVWF  41
0648:  CALL   0B1
0649:  BSF    03.5
064A:  BCF    06.4
064B:  BCF    03.5
064C:  BCF    06.4
064D:  MOVLW  C8
064E:  MOVWF  41
064F:  CALL   0B1
.................... } 
0650:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void display1_goster() 
.................... { 
....................        display_goster(0x00); 
*
01E2:  CLRF   39
01E3:  CALL   0D2
....................        display_goster(0x00); 
01E4:  CLRF   39
01E5:  CALL   0D2
....................        display_goster(0x00); 
01E6:  CLRF   39
01E7:  CALL   0D2
....................        display_goster(0x00); 
01E8:  CLRF   39
01E9:  CALL   0D2
....................        display_goster(digit[display1_birler]); 
01EA:  MOVF   29,W
01EB:  CALL   004
01EC:  MOVWF  38
01ED:  MOVWF  39
01EE:  CALL   0D2
....................        display_goster(digit[display1_onlar]); 
01EF:  MOVF   28,W
01F0:  CALL   004
01F1:  MOVWF  38
01F2:  MOVWF  39
01F3:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
01F4:  BSF    03.5
01F5:  BCF    06.2
01F6:  BCF    03.5
01F7:  BSF    06.2
....................        delay_us(30); 
01F8:  MOVLW  09
01F9:  MOVWF  77
01FA:  DECFSZ 77,F
01FB:  GOTO   1FA
01FC:  GOTO   1FD
....................        output_low(ST_CP); 
01FD:  BSF    03.5
01FE:  BCF    06.2
01FF:  BCF    03.5
0200:  BCF    06.2
....................        delay_ms(150); 
0201:  MOVLW  96
0202:  MOVWF  41
0203:  CALL   0B1
....................         
....................        display_goster(0x00); 
0204:  CLRF   39
0205:  CALL   0D2
....................        display_goster(0x00); 
0206:  CLRF   39
0207:  CALL   0D2
....................        display_goster(0x00); 
0208:  CLRF   39
0209:  CALL   0D2
....................        display_goster(0x00); 
020A:  CLRF   39
020B:  CALL   0D2
....................        display_goster(0x00); 
020C:  CLRF   39
020D:  CALL   0D2
....................        display_goster(0x00); 
020E:  CLRF   39
020F:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
0210:  BSF    03.5
0211:  BCF    06.2
0212:  BCF    03.5
0213:  BSF    06.2
....................        delay_us(30); 
0214:  MOVLW  09
0215:  MOVWF  77
0216:  DECFSZ 77,F
0217:  GOTO   216
0218:  GOTO   219
....................        output_low(ST_CP); 
0219:  BSF    03.5
021A:  BCF    06.2
021B:  BCF    03.5
021C:  BCF    06.2
....................        delay_ms(5); 
021D:  MOVLW  05
021E:  MOVWF  41
021F:  CALL   0B1
0220:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void display2_goster() 
.................... { 
....................        display_goster(0x00); 
*
0238:  CLRF   39
0239:  CALL   0D2
....................        display_goster(0x00); 
023A:  CLRF   39
023B:  CALL   0D2
....................        display_goster(digit[display2_birler]); 
023C:  MOVF   2B,W
023D:  CALL   004
023E:  MOVWF  38
023F:  MOVWF  39
0240:  CALL   0D2
....................        display_goster(digit[display2_onlar]); 
0241:  MOVF   2A,W
0242:  CALL   004
0243:  MOVWF  38
0244:  MOVWF  39
0245:  CALL   0D2
....................        display_goster(0x00); 
0246:  CLRF   39
0247:  CALL   0D2
....................        display_goster(0x00); 
0248:  CLRF   39
0249:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
024A:  BSF    03.5
024B:  BCF    06.2
024C:  BCF    03.5
024D:  BSF    06.2
....................        delay_us(30); 
024E:  MOVLW  09
024F:  MOVWF  77
0250:  DECFSZ 77,F
0251:  GOTO   250
0252:  GOTO   253
....................        output_low(ST_CP); 
0253:  BSF    03.5
0254:  BCF    06.2
0255:  BCF    03.5
0256:  BCF    06.2
....................        delay_ms(150);  
0257:  MOVLW  96
0258:  MOVWF  41
0259:  CALL   0B1
....................         
....................        display_goster(0x00); 
025A:  CLRF   39
025B:  CALL   0D2
....................        display_goster(0x00); 
025C:  CLRF   39
025D:  CALL   0D2
....................        display_goster(0x00); 
025E:  CLRF   39
025F:  CALL   0D2
....................        display_goster(0x00); 
0260:  CLRF   39
0261:  CALL   0D2
....................        display_goster(0x00); 
0262:  CLRF   39
0263:  CALL   0D2
....................        display_goster(0x00); 
0264:  CLRF   39
0265:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
0266:  BSF    03.5
0267:  BCF    06.2
0268:  BCF    03.5
0269:  BSF    06.2
....................        delay_us(30); 
026A:  MOVLW  09
026B:  MOVWF  77
026C:  DECFSZ 77,F
026D:  GOTO   26C
026E:  GOTO   26F
....................        output_low(ST_CP); 
026F:  BSF    03.5
0270:  BCF    06.2
0271:  BCF    03.5
0272:  BCF    06.2
....................        delay_ms(5); 
0273:  MOVLW  05
0274:  MOVWF  41
0275:  CALL   0B1
0276:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void display3_goster() 
.................... { 
....................        display_goster(digit[display3_birler]); 
0277:  MOVF   2D,W
0278:  CALL   004
0279:  MOVWF  38
027A:  MOVWF  39
027B:  CALL   0D2
....................        display_goster(digit[display3_onlar]); 
027C:  MOVF   2C,W
027D:  CALL   004
027E:  MOVWF  38
027F:  MOVWF  39
0280:  CALL   0D2
....................        display_goster(0x00); 
0281:  CLRF   39
0282:  CALL   0D2
....................        display_goster(0x00); 
0283:  CLRF   39
0284:  CALL   0D2
....................        display_goster(0x00); 
0285:  CLRF   39
0286:  CALL   0D2
....................        display_goster(0x00); 
0287:  CLRF   39
0288:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
0289:  BSF    03.5
028A:  BCF    06.2
028B:  BCF    03.5
028C:  BSF    06.2
....................        delay_us(30); 
028D:  MOVLW  09
028E:  MOVWF  77
028F:  DECFSZ 77,F
0290:  GOTO   28F
0291:  GOTO   292
....................        output_low(ST_CP); 
0292:  BSF    03.5
0293:  BCF    06.2
0294:  BCF    03.5
0295:  BCF    06.2
....................        delay_ms(150); 
0296:  MOVLW  96
0297:  MOVWF  41
0298:  CALL   0B1
....................         
....................        display_goster(0x00); 
0299:  CLRF   39
029A:  CALL   0D2
....................        display_goster(0x00); 
029B:  CLRF   39
029C:  CALL   0D2
....................        display_goster(0x00); 
029D:  CLRF   39
029E:  CALL   0D2
....................        display_goster(0x00); 
029F:  CLRF   39
02A0:  CALL   0D2
....................        display_goster(0x00); 
02A1:  CLRF   39
02A2:  CALL   0D2
....................        display_goster(0x00); 
02A3:  CLRF   39
02A4:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
02A5:  BSF    03.5
02A6:  BCF    06.2
02A7:  BCF    03.5
02A8:  BSF    06.2
....................        delay_us(30); 
02A9:  MOVLW  09
02AA:  MOVWF  77
02AB:  DECFSZ 77,F
02AC:  GOTO   2AB
02AD:  GOTO   2AE
....................        output_low(ST_CP); 
02AE:  BSF    03.5
02AF:  BCF    06.2
02B0:  BCF    03.5
02B1:  BCF    06.2
....................        delay_ms(5); 
02B2:  MOVLW  05
02B3:  MOVWF  41
02B4:  CALL   0B1
02B5:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void set_konumunda_display_goster()  
.................... { 
.................... delay_ms(200); 
*
017B:  MOVLW  C8
017C:  MOVWF  41
017D:  CALL   0B1
....................        if(sicaklik_ekrani==1){ 
017E:  DECFSZ 37,W
017F:  GOTO   197
....................        display_goster(display3_birler); 
0180:  MOVF   2D,W
0181:  MOVWF  39
0182:  CALL   0D2
....................        display_goster(display3_onlar); 
0183:  MOVF   2C,W
0184:  MOVWF  39
0185:  CALL   0D2
....................        display_goster(display2_birler); 
0186:  MOVF   2B,W
0187:  MOVWF  39
0188:  CALL   0D2
....................        display_goster(digit[display2_onlar]); 
0189:  MOVF   2A,W
018A:  CALL   004
018B:  MOVWF  38
018C:  MOVWF  39
018D:  CALL   0D2
....................        display_goster(digit[display1_birler]); 
018E:  MOVF   29,W
018F:  CALL   004
0190:  MOVWF  38
0191:  MOVWF  39
0192:  CALL   0D2
....................        display_goster(display1_onlar); 
0193:  MOVF   28,W
0194:  MOVWF  39
0195:  CALL   0D2
....................        } 
0196:  GOTO   1B5
....................       else{ 
....................       display_goster(digit[display3_birler]); 
0197:  MOVF   2D,W
0198:  CALL   004
0199:  MOVWF  38
019A:  MOVWF  39
019B:  CALL   0D2
....................       display_goster(digit[display3_onlar]); 
019C:  MOVF   2C,W
019D:  CALL   004
019E:  MOVWF  38
019F:  MOVWF  39
01A0:  CALL   0D2
....................       display_goster(digit[display2_birler]); 
01A1:  MOVF   2B,W
01A2:  CALL   004
01A3:  MOVWF  38
01A4:  MOVWF  39
01A5:  CALL   0D2
....................       display_goster(digit[display2_onlar]); 
01A6:  MOVF   2A,W
01A7:  CALL   004
01A8:  MOVWF  38
01A9:  MOVWF  39
01AA:  CALL   0D2
....................       display_goster(digit[display1_birler]); 
01AB:  MOVF   29,W
01AC:  CALL   004
01AD:  MOVWF  38
01AE:  MOVWF  39
01AF:  CALL   0D2
....................       display_goster(digit[display1_onlar]); 
01B0:  MOVF   28,W
01B1:  CALL   004
01B2:  MOVWF  38
01B3:  MOVWF  39
01B4:  CALL   0D2
....................       } 
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
01B5:  BSF    03.5
01B6:  BCF    06.2
01B7:  BCF    03.5
01B8:  BSF    06.2
....................        delay_us(30); 
01B9:  MOVLW  09
01BA:  MOVWF  77
01BB:  DECFSZ 77,F
01BC:  GOTO   1BB
01BD:  GOTO   1BE
....................        output_low(ST_CP); 
01BE:  BSF    03.5
01BF:  BCF    06.2
01C0:  BCF    03.5
01C1:  BCF    06.2
....................        delay_ms(150);  
01C2:  MOVLW  96
01C3:  MOVWF  41
01C4:  CALL   0B1
....................         
....................        display_goster(0x00); 
01C5:  CLRF   39
01C6:  CALL   0D2
....................        display_goster(0x00); 
01C7:  CLRF   39
01C8:  CALL   0D2
....................        display_goster(0x00); 
01C9:  CLRF   39
01CA:  CALL   0D2
....................        display_goster(0x00); 
01CB:  CLRF   39
01CC:  CALL   0D2
....................        display_goster(0x00); 
01CD:  CLRF   39
01CE:  CALL   0D2
....................        display_goster(0x00); 
01CF:  CLRF   39
01D0:  CALL   0D2
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
01D1:  BSF    03.5
01D2:  BCF    06.2
01D3:  BCF    03.5
01D4:  BSF    06.2
....................        delay_us(30); 
01D5:  MOVLW  09
01D6:  MOVWF  77
01D7:  DECFSZ 77,F
01D8:  GOTO   1D7
01D9:  GOTO   1DA
....................        output_low(ST_CP); 
01DA:  BSF    03.5
01DB:  BCF    06.2
01DC:  BCF    03.5
01DD:  BCF    06.2
....................        delay_ms(5); 
01DE:  MOVLW  05
01DF:  MOVWF  41
01E0:  CALL   0B1
01E1:  RETURN
....................  
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void alarm_kontrol(){ 
.................... for(i=1;i<=8;i++){ 
*
0651:  MOVLW  01
0652:  MOVWF  2E
0653:  MOVF   2E,W
0654:  SUBLW  08
0655:  BTFSS  03.0
0656:  GOTO   6DA
.................... if(read_eeprom((3*i)-2)==saat && read_eeprom((3*i)-1)==dakika && read_eeprom(3*i)==saniye && saat!=0 && dakika!=0){ 
0657:  MOVLW  03
0658:  MOVWF  41
0659:  MOVF   2E,W
065A:  MOVWF  42
065B:  CALL   126
065C:  MOVLW  02
065D:  SUBWF  78,W
065E:  MOVWF  38
065F:  MOVF   38,W
0660:  BSF    03.6
0661:  MOVWF  0D
0662:  BSF    03.5
0663:  BCF    0C.7
0664:  BSF    0C.0
0665:  BCF    03.5
0666:  MOVF   0C,W
0667:  BCF    03.6
0668:  SUBWF  23,W
0669:  BTFSS  03.2
066A:  GOTO   6D8
066B:  MOVLW  03
066C:  MOVWF  41
066D:  MOVF   2E,W
066E:  MOVWF  42
066F:  CALL   126
0670:  MOVLW  01
0671:  SUBWF  78,W
0672:  MOVWF  38
0673:  MOVF   38,W
0674:  BSF    03.6
0675:  MOVWF  0D
0676:  BSF    03.5
0677:  BCF    0C.7
0678:  BSF    0C.0
0679:  BCF    03.5
067A:  MOVF   0C,W
067B:  BCF    03.6
067C:  SUBWF  22,W
067D:  BTFSS  03.2
067E:  GOTO   6D8
067F:  MOVLW  03
0680:  MOVWF  41
0681:  MOVF   2E,W
0682:  MOVWF  42
0683:  CALL   126
0684:  MOVF   78,W
0685:  MOVWF  38
0686:  MOVF   38,W
0687:  BSF    03.6
0688:  MOVWF  0D
0689:  BSF    03.5
068A:  BCF    0C.7
068B:  BSF    0C.0
068C:  BCF    03.5
068D:  MOVF   0C,W
068E:  BCF    03.6
068F:  SUBWF  21,W
0690:  BTFSS  03.2
0691:  GOTO   6D8
0692:  MOVF   23,F
0693:  BTFSC  03.2
0694:  GOTO   6D8
0695:  MOVF   22,F
0696:  BTFSC  03.2
0697:  GOTO   6D8
.................... for(k=0;k<=4;k++){ 
0698:  CLRF   30
0699:  MOVF   30,W
069A:  SUBLW  04
069B:  BTFSS  03.0
069C:  GOTO   6D8
.................... ekran(); 
069D:  CALL   0F7
.................... output_high(buzzer);delay_ms(200);  output_low(buzzer);delay_ms(200); 
069E:  BSF    03.5
069F:  BCF    06.4
06A0:  BCF    03.5
06A1:  BSF    06.4
06A2:  MOVLW  C8
06A3:  MOVWF  41
06A4:  CALL   0B1
06A5:  BSF    03.5
06A6:  BCF    06.4
06A7:  BCF    03.5
06A8:  BCF    06.4
06A9:  MOVLW  C8
06AA:  MOVWF  41
06AB:  CALL   0B1
.................... output_high(buzzer);delay_ms(200);  output_low(buzzer);delay_ms(200); 
06AC:  BSF    03.5
06AD:  BCF    06.4
06AE:  BCF    03.5
06AF:  BSF    06.4
06B0:  MOVLW  C8
06B1:  MOVWF  41
06B2:  CALL   0B1
06B3:  BSF    03.5
06B4:  BCF    06.4
06B5:  BCF    03.5
06B6:  BCF    06.4
06B7:  MOVLW  C8
06B8:  MOVWF  41
06B9:  CALL   0B1
.................... output_high(buzzer);delay_ms(200);  output_low(buzzer);delay_ms(200); 
06BA:  BSF    03.5
06BB:  BCF    06.4
06BC:  BCF    03.5
06BD:  BSF    06.4
06BE:  MOVLW  C8
06BF:  MOVWF  41
06C0:  CALL   0B1
06C1:  BSF    03.5
06C2:  BCF    06.4
06C3:  BCF    03.5
06C4:  BCF    06.4
06C5:  MOVLW  C8
06C6:  MOVWF  41
06C7:  CALL   0B1
.................... output_high(buzzer);delay_ms(200);  output_low(buzzer);delay_ms(200);} 
06C8:  BSF    03.5
06C9:  BCF    06.4
06CA:  BCF    03.5
06CB:  BSF    06.4
06CC:  MOVLW  C8
06CD:  MOVWF  41
06CE:  CALL   0B1
06CF:  BSF    03.5
06D0:  BCF    06.4
06D1:  BCF    03.5
06D2:  BCF    06.4
06D3:  MOVLW  C8
06D4:  MOVWF  41
06D5:  CALL   0B1
06D6:  INCF   30,F
06D7:  GOTO   699
.................... } 
06D8:  INCF   2E,F
06D9:  GOTO   653
.................... } 
06DA:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void buton(){ 
.................... output_high(buzzer);delay_ms(150);  output_low(buzzer); break; 
*
00C6:  BSF    03.5
00C7:  BCF    06.4
00C8:  BCF    03.5
00C9:  BSF    06.4
00CA:  MOVLW  96
00CB:  MOVWF  41
00CC:  CALL   0B1
00CD:  BSF    03.5
00CE:  BCF    06.4
00CF:  BCF    03.5
00D0:  BCF    06.4
00D1:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void alarm_secim(){ 
....................  
....................     while(set_degeri==1) 
*
0802:  DECFSZ 33,W
0803:  GOTO   092
....................  { saat=1; 
0804:  MOVLW  01
0805:  MOVWF  23
....................   for(;;)                
....................   { 
....................   while(input(arttir) && input(azalt)){ 
0806:  BSF    20.6
0807:  MOVF   20,W
0808:  BSF    03.5
0809:  MOVWF  07
080A:  BCF    03.5
080B:  BTFSS  07.6
080C:  GOTO   02A
080D:  BSF    20.7
080E:  MOVF   20,W
080F:  BSF    03.5
0810:  MOVWF  07
0811:  BCF    03.5
0812:  BTFSS  07.7
0813:  GOTO   02A
....................     display1_birler=saat%10;              
0814:  MOVF   23,W
0815:  MOVWF  3B
0816:  MOVLW  0A
0817:  MOVWF  3C
0818:  BCF    0A.3
0819:  CALL   166
081A:  BSF    0A.3
081B:  MOVF   77,W
081C:  MOVWF  29
....................     display1_onlar=saat/10;             
081D:  MOVF   23,W
081E:  MOVWF  3B
081F:  MOVLW  0A
0820:  MOVWF  3C
0821:  BCF    0A.3
0822:  CALL   166
0823:  BSF    0A.3
0824:  MOVF   78,W
0825:  MOVWF  28
....................     display1_goster(); 
0826:  BCF    0A.3
0827:  CALL   1E2
0828:  BSF    0A.3
0829:  GOTO   006
....................   } 
....................       display1_birler=saat%10;              
082A:  MOVF   23,W
082B:  MOVWF  3B
082C:  MOVLW  0A
082D:  MOVWF  3C
082E:  BCF    0A.3
082F:  CALL   166
0830:  BSF    0A.3
0831:  MOVF   77,W
0832:  MOVWF  29
....................     display1_onlar=saat/10;             
0833:  MOVF   23,W
0834:  MOVWF  3B
0835:  MOVLW  0A
0836:  MOVWF  3C
0837:  BCF    0A.3
0838:  CALL   166
0839:  BSF    0A.3
083A:  MOVF   78,W
083B:  MOVWF  28
....................     display1_goster(); 
083C:  BCF    0A.3
083D:  CALL   1E2
083E:  BSF    0A.3
....................  if(input(arttir)){buton(); saat++; while(input(arttir)){display1_goster();} if(saat==9){saat=1;} } 
083F:  BSF    20.6
0840:  MOVF   20,W
0841:  BSF    03.5
0842:  MOVWF  07
0843:  BCF    03.5
0844:  BTFSS  07.6
0845:  GOTO   05B
0846:  BCF    0A.3
0847:  CALL   0C6
0848:  BSF    0A.3
0849:  INCF   23,F
084A:  BSF    20.6
084B:  MOVF   20,W
084C:  BSF    03.5
084D:  MOVWF  07
084E:  BCF    03.5
084F:  BTFSS  07.6
0850:  GOTO   055
0851:  BCF    0A.3
0852:  CALL   1E2
0853:  BSF    0A.3
0854:  GOTO   04A
0855:  MOVF   23,W
0856:  SUBLW  09
0857:  BTFSS  03.2
0858:  GOTO   05B
0859:  MOVLW  01
085A:  MOVWF  23
....................  if(input(azalt)){buton(); saat--; while(input(azalt)){display1_goster();} if(saat==0){saat=8;} } 
085B:  BSF    20.7
085C:  MOVF   20,W
085D:  BSF    03.5
085E:  MOVWF  07
085F:  BCF    03.5
0860:  BTFSS  07.7
0861:  GOTO   076
0862:  BCF    0A.3
0863:  CALL   0C6
0864:  BSF    0A.3
0865:  DECF   23,F
0866:  BSF    20.7
0867:  MOVF   20,W
0868:  BSF    03.5
0869:  MOVWF  07
086A:  BCF    03.5
086B:  BTFSS  07.7
086C:  GOTO   071
086D:  BCF    0A.3
086E:  CALL   1E2
086F:  BSF    0A.3
0870:  GOTO   066
0871:  MOVF   23,F
0872:  BTFSS  03.2
0873:  GOTO   076
0874:  MOVLW  08
0875:  MOVWF  23
....................  if(input(set)){buton(); while(input(set)){alarm_sira=saat;} goto alarmsecim_cik;}                                     
0876:  BSF    20.4
0877:  MOVF   20,W
0878:  BSF    03.5
0879:  MOVWF  07
087A:  BCF    03.5
087B:  BTFSS  07.4
087C:  GOTO   08B
087D:  BCF    0A.3
087E:  CALL   0C6
087F:  BSF    0A.3
0880:  BSF    20.4
0881:  MOVF   20,W
0882:  BSF    03.5
0883:  MOVWF  07
0884:  BCF    03.5
0885:  BTFSS  07.4
0886:  GOTO   08A
0887:  MOVF   23,W
0888:  MOVWF  32
0889:  GOTO   080
088A:  GOTO   092
....................  delay_ms(5); 
088B:  MOVLW  05
088C:  MOVWF  41
088D:  BCF    0A.3
088E:  CALL   0B1
088F:  BSF    0A.3
0890:  GOTO   006
.................... } 
0891:  GOTO   002
.................... } 
....................    alarmsecim_cik: 
....................    gecis_animasyon(); 
0892:  BCF    0A.3
0893:  CALL   2B6
0894:  BSF    0A.3
.................... }///////////////////////////////////////////////////////////////////////////////////3x-2,3x-1,3x 
.................... void alarm_set(){ 
.................... basla: 
....................    set_degeri=1; 
*
0800:  MOVLW  01
0801:  MOVWF  33
....................    alarm_secim(); 
....................     
....................    while(set_degeri==1){ 
*
0895:  DECFSZ 33,W
0896:  GOTO   367
....................    saat=read_eeprom(3*alarm_sira-2); dakika=read_eeprom(3*alarm_sira-1); saniye=read_eeprom(3*alarm_sira); 
0897:  MOVLW  03
0898:  MOVWF  41
0899:  MOVF   32,W
089A:  MOVWF  42
089B:  BCF    0A.3
089C:  CALL   126
089D:  BSF    0A.3
089E:  MOVLW  02
089F:  SUBWF  78,W
08A0:  MOVWF  38
08A1:  MOVF   38,W
08A2:  BSF    03.6
08A3:  MOVWF  0D
08A4:  BSF    03.5
08A5:  BCF    0C.7
08A6:  BSF    0C.0
08A7:  BCF    03.5
08A8:  MOVF   0C,W
08A9:  BCF    03.6
08AA:  MOVWF  23
08AB:  MOVLW  03
08AC:  MOVWF  41
08AD:  MOVF   32,W
08AE:  MOVWF  42
08AF:  BCF    0A.3
08B0:  CALL   126
08B1:  BSF    0A.3
08B2:  MOVLW  01
08B3:  SUBWF  78,W
08B4:  MOVWF  38
08B5:  MOVF   38,W
08B6:  BSF    03.6
08B7:  MOVWF  0D
08B8:  BSF    03.5
08B9:  BCF    0C.7
08BA:  BSF    0C.0
08BB:  BCF    03.5
08BC:  MOVF   0C,W
08BD:  BCF    03.6
08BE:  MOVWF  22
08BF:  MOVLW  03
08C0:  MOVWF  41
08C1:  MOVF   32,W
08C2:  MOVWF  42
08C3:  BCF    0A.3
08C4:  CALL   126
08C5:  BSF    0A.3
08C6:  MOVF   78,W
08C7:  MOVWF  38
08C8:  MOVF   38,W
08C9:  BSF    03.6
08CA:  MOVWF  0D
08CB:  BSF    03.5
08CC:  BCF    0C.7
08CD:  BSF    0C.0
08CE:  BCF    03.5
08CF:  MOVF   0C,W
08D0:  BCF    03.6
08D1:  MOVWF  21
....................    display1_birler=saat%10; 
08D2:  MOVF   23,W
08D3:  MOVWF  3B
08D4:  MOVLW  0A
08D5:  MOVWF  3C
08D6:  BCF    0A.3
08D7:  CALL   166
08D8:  BSF    0A.3
08D9:  MOVF   77,W
08DA:  MOVWF  29
....................    display1_onlar=saat/10; 
08DB:  MOVF   23,W
08DC:  MOVWF  3B
08DD:  MOVLW  0A
08DE:  MOVWF  3C
08DF:  BCF    0A.3
08E0:  CALL   166
08E1:  BSF    0A.3
08E2:  MOVF   78,W
08E3:  MOVWF  28
....................    display2_birler=dakika%10; 
08E4:  MOVF   22,W
08E5:  MOVWF  3B
08E6:  MOVLW  0A
08E7:  MOVWF  3C
08E8:  BCF    0A.3
08E9:  CALL   166
08EA:  BSF    0A.3
08EB:  MOVF   77,W
08EC:  MOVWF  2B
....................    display2_onlar=dakika/10; 
08ED:  MOVF   22,W
08EE:  MOVWF  3B
08EF:  MOVLW  0A
08F0:  MOVWF  3C
08F1:  BCF    0A.3
08F2:  CALL   166
08F3:  BSF    0A.3
08F4:  MOVF   78,W
08F5:  MOVWF  2A
....................    display3_birler=saniye%10; 
08F6:  MOVF   21,W
08F7:  MOVWF  3B
08F8:  MOVLW  0A
08F9:  MOVWF  3C
08FA:  BCF    0A.3
08FB:  CALL   166
08FC:  BSF    0A.3
08FD:  MOVF   77,W
08FE:  MOVWF  2D
....................    display3_onlar=saniye/10; 
08FF:  MOVF   21,W
0900:  MOVWF  3B
0901:  MOVLW  0A
0902:  MOVWF  3C
0903:  BCF    0A.3
0904:  CALL   166
0905:  BSF    0A.3
0906:  MOVF   78,W
0907:  MOVWF  2C
....................    set_konumunda_display_goster(); 
0908:  BCF    0A.3
0909:  CALL   17B
090A:  BSF    0A.3
....................     
....................    if(input(set)){buton(); while(input(set)){ekran();} goto alarmdan_cik; } 
090B:  BSF    20.4
090C:  MOVF   20,W
090D:  BSF    03.5
090E:  MOVWF  07
090F:  BCF    03.5
0910:  BTFSS  07.4
0911:  GOTO   121
0912:  BCF    0A.3
0913:  CALL   0C6
0914:  BSF    0A.3
0915:  BSF    20.4
0916:  MOVF   20,W
0917:  BSF    03.5
0918:  MOVWF  07
0919:  BCF    03.5
091A:  BTFSS  07.4
091B:  GOTO   120
091C:  BCF    0A.3
091D:  CALL   0F7
091E:  BSF    0A.3
091F:  GOTO   115
0920:  GOTO   367
....................    if(input(mod)){buton(); while(input(mod)){ekran();} mod_degeri=1;} 
0921:  BSF    20.5
0922:  MOVF   20,W
0923:  BSF    03.5
0924:  MOVWF  07
0925:  BCF    03.5
0926:  BTFSS  07.5
0927:  GOTO   138
0928:  BCF    0A.3
0929:  CALL   0C6
092A:  BSF    0A.3
092B:  BSF    20.5
092C:  MOVF   20,W
092D:  BSF    03.5
092E:  MOVWF  07
092F:  BCF    03.5
0930:  BTFSS  07.5
0931:  GOTO   136
0932:  BCF    0A.3
0933:  CALL   0F7
0934:  BSF    0A.3
0935:  GOTO   12B
0936:  MOVLW  01
0937:  MOVWF  34
....................    if(input(arttir) && input(azalt)){buton();saat=0;dakika=0;saniye=0; write_eeprom((3*alarm_sira-2),0); delay_ms(5); write_eeprom((3*alarm_sira-1),0); delay_ms(5); write_eeprom((3*alarm_sira),0); goto basla;} 
0938:  BSF    20.6
0939:  MOVF   20,W
093A:  BSF    03.5
093B:  MOVWF  07
093C:  BCF    03.5
093D:  BTFSS  07.6
093E:  GOTO   1B6
093F:  BSF    20.7
0940:  MOVF   20,W
0941:  BSF    03.5
0942:  MOVWF  07
0943:  BCF    03.5
0944:  BTFSS  07.7
0945:  GOTO   1B6
0946:  BCF    0A.3
0947:  CALL   0C6
0948:  BSF    0A.3
0949:  CLRF   23
094A:  CLRF   22
094B:  CLRF   21
094C:  MOVLW  03
094D:  MOVWF  41
094E:  MOVF   32,W
094F:  MOVWF  42
0950:  BCF    0A.3
0951:  CALL   126
0952:  BSF    0A.3
0953:  MOVLW  02
0954:  SUBWF  78,W
0955:  MOVWF  38
0956:  MOVF   0B,W
0957:  MOVWF  77
0958:  BCF    0B.7
0959:  MOVF   38,W
095A:  BSF    03.6
095B:  MOVWF  0D
095C:  CLRF   0C
095D:  BSF    03.5
095E:  BCF    0C.7
095F:  BSF    0C.2
0960:  MOVLW  55
0961:  MOVWF  0D
0962:  MOVLW  AA
0963:  MOVWF  0D
0964:  BSF    0C.1
0965:  BTFSC  0C.1
0966:  GOTO   165
0967:  BCF    0C.2
0968:  MOVF   77,W
0969:  BCF    03.5
096A:  BCF    03.6
096B:  IORWF  0B,F
096C:  MOVLW  05
096D:  MOVWF  41
096E:  BCF    0A.3
096F:  CALL   0B1
0970:  BSF    0A.3
0971:  MOVLW  03
0972:  MOVWF  41
0973:  MOVF   32,W
0974:  MOVWF  42
0975:  BCF    0A.3
0976:  CALL   126
0977:  BSF    0A.3
0978:  MOVLW  01
0979:  SUBWF  78,W
097A:  MOVWF  38
097B:  MOVF   0B,W
097C:  MOVWF  77
097D:  BCF    0B.7
097E:  MOVF   38,W
097F:  BSF    03.6
0980:  MOVWF  0D
0981:  CLRF   0C
0982:  BSF    03.5
0983:  BCF    0C.7
0984:  BSF    0C.2
0985:  MOVLW  55
0986:  MOVWF  0D
0987:  MOVLW  AA
0988:  MOVWF  0D
0989:  BSF    0C.1
098A:  BTFSC  0C.1
098B:  GOTO   18A
098C:  BCF    0C.2
098D:  MOVF   77,W
098E:  BCF    03.5
098F:  BCF    03.6
0990:  IORWF  0B,F
0991:  MOVLW  05
0992:  MOVWF  41
0993:  BCF    0A.3
0994:  CALL   0B1
0995:  BSF    0A.3
0996:  MOVLW  03
0997:  MOVWF  41
0998:  MOVF   32,W
0999:  MOVWF  42
099A:  BCF    0A.3
099B:  CALL   126
099C:  BSF    0A.3
099D:  MOVF   78,W
099E:  MOVWF  38
099F:  MOVF   0B,W
09A0:  MOVWF  77
09A1:  BCF    0B.7
09A2:  MOVF   38,W
09A3:  BSF    03.6
09A4:  MOVWF  0D
09A5:  CLRF   0C
09A6:  BSF    03.5
09A7:  BCF    0C.7
09A8:  BSF    0C.2
09A9:  MOVLW  55
09AA:  MOVWF  0D
09AB:  MOVLW  AA
09AC:  MOVWF  0D
09AD:  BSF    0C.1
09AE:  BTFSC  0C.1
09AF:  GOTO   1AE
09B0:  BCF    0C.2
09B1:  MOVF   77,W
09B2:  BCF    03.5
09B3:  BCF    03.6
09B4:  IORWF  0B,F
09B5:  GOTO   000
....................     
....................     while(mod_degeri==1) 
09B6:  DECFSZ 34,W
09B7:  GOTO   245
....................  {  
....................        
....................   for(;;)                
....................   {             
....................     display1_birler=saat%10;              
09B8:  MOVF   23,W
09B9:  MOVWF  3B
09BA:  MOVLW  0A
09BB:  MOVWF  3C
09BC:  BCF    0A.3
09BD:  CALL   166
09BE:  BSF    0A.3
09BF:  MOVF   77,W
09C0:  MOVWF  29
....................     display1_onlar=saat/10;             
09C1:  MOVF   23,W
09C2:  MOVWF  3B
09C3:  MOVLW  0A
09C4:  MOVWF  3C
09C5:  BCF    0A.3
09C6:  CALL   166
09C7:  BSF    0A.3
09C8:  MOVF   78,W
09C9:  MOVWF  28
....................     display1_goster(); 
09CA:  BCF    0A.3
09CB:  CALL   1E2
09CC:  BSF    0A.3
....................                                                                 
....................  if(input(arttir)){buton(); saat++; while(input(arttir)){display1_goster();} if(saat==24){saat=0;} } 
09CD:  BSF    20.6
09CE:  MOVF   20,W
09CF:  BSF    03.5
09D0:  MOVWF  07
09D1:  BCF    03.5
09D2:  BTFSS  07.6
09D3:  GOTO   1E7
09D4:  BCF    0A.3
09D5:  CALL   0C6
09D6:  BSF    0A.3
09D7:  INCF   23,F
09D8:  BSF    20.6
09D9:  MOVF   20,W
09DA:  BSF    03.5
09DB:  MOVWF  07
09DC:  BCF    03.5
09DD:  BTFSS  07.6
09DE:  GOTO   1E3
09DF:  BCF    0A.3
09E0:  CALL   1E2
09E1:  BSF    0A.3
09E2:  GOTO   1D8
09E3:  MOVF   23,W
09E4:  SUBLW  18
09E5:  BTFSC  03.2
09E6:  CLRF   23
....................  if(input(azalt)){buton();saat--; while(input(azalt)){display1_goster();} if(saat==-1){saat=23;} } 
09E7:  BSF    20.7
09E8:  MOVF   20,W
09E9:  BSF    03.5
09EA:  MOVWF  07
09EB:  BCF    03.5
09EC:  BTFSS  07.7
09ED:  GOTO   203
09EE:  BCF    0A.3
09EF:  CALL   0C6
09F0:  BSF    0A.3
09F1:  DECF   23,F
09F2:  BSF    20.7
09F3:  MOVF   20,W
09F4:  BSF    03.5
09F5:  MOVWF  07
09F6:  BCF    03.5
09F7:  BTFSS  07.7
09F8:  GOTO   1FD
09F9:  BCF    0A.3
09FA:  CALL   1E2
09FB:  BSF    0A.3
09FC:  GOTO   1F2
09FD:  MOVF   23,W
09FE:  SUBLW  FF
09FF:  BTFSS  03.2
0A00:  GOTO   203
0A01:  MOVLW  17
0A02:  MOVWF  23
....................  if(input(mod)){buton(); while(input(mod)){display1_goster();} mod_degeri=2; goto mod1_cik;}                                     
0A03:  BSF    20.5
0A04:  MOVF   20,W
0A05:  BSF    03.5
0A06:  MOVWF  07
0A07:  BCF    03.5
0A08:  BTFSS  07.5
0A09:  GOTO   21B
0A0A:  BCF    0A.3
0A0B:  CALL   0C6
0A0C:  BSF    0A.3
0A0D:  BSF    20.5
0A0E:  MOVF   20,W
0A0F:  BSF    03.5
0A10:  MOVWF  07
0A11:  BCF    03.5
0A12:  BTFSS  07.5
0A13:  GOTO   218
0A14:  BCF    0A.3
0A15:  CALL   1E2
0A16:  BSF    0A.3
0A17:  GOTO   20D
0A18:  MOVLW  02
0A19:  MOVWF  34
0A1A:  GOTO   245
....................  write_eeprom((3*alarm_sira-2),saat); 
0A1B:  MOVLW  03
0A1C:  MOVWF  41
0A1D:  MOVF   32,W
0A1E:  MOVWF  42
0A1F:  BCF    0A.3
0A20:  CALL   126
0A21:  BSF    0A.3
0A22:  MOVLW  02
0A23:  SUBWF  78,W
0A24:  MOVWF  38
0A25:  MOVF   0B,W
0A26:  MOVWF  77
0A27:  BCF    0B.7
0A28:  MOVF   38,W
0A29:  BSF    03.6
0A2A:  MOVWF  0D
0A2B:  BCF    03.6
0A2C:  MOVF   23,W
0A2D:  BSF    03.6
0A2E:  MOVWF  0C
0A2F:  BSF    03.5
0A30:  BCF    0C.7
0A31:  BSF    0C.2
0A32:  MOVLW  55
0A33:  MOVWF  0D
0A34:  MOVLW  AA
0A35:  MOVWF  0D
0A36:  BSF    0C.1
0A37:  BTFSC  0C.1
0A38:  GOTO   237
0A39:  BCF    0C.2
0A3A:  MOVF   77,W
0A3B:  BCF    03.5
0A3C:  BCF    03.6
0A3D:  IORWF  0B,F
....................  delay_ms(5); 
0A3E:  MOVLW  05
0A3F:  MOVWF  41
0A40:  BCF    0A.3
0A41:  CALL   0B1
0A42:  BSF    0A.3
0A43:  GOTO   1B8
.................... } 
0A44:  GOTO   1B6
.................... }  
.................... mod1_cik: 
....................  
....................   while(mod_degeri==2) 
0A45:  MOVF   34,W
0A46:  SUBLW  02
0A47:  BTFSS  03.2
0A48:  GOTO   2D6
....................  {                               
....................  
....................   for(;;)                
....................   {                       
....................     display2_birler=dakika%10;              
0A49:  MOVF   22,W
0A4A:  MOVWF  3B
0A4B:  MOVLW  0A
0A4C:  MOVWF  3C
0A4D:  BCF    0A.3
0A4E:  CALL   166
0A4F:  BSF    0A.3
0A50:  MOVF   77,W
0A51:  MOVWF  2B
....................     display2_onlar=dakika/10;             
0A52:  MOVF   22,W
0A53:  MOVWF  3B
0A54:  MOVLW  0A
0A55:  MOVWF  3C
0A56:  BCF    0A.3
0A57:  CALL   166
0A58:  BSF    0A.3
0A59:  MOVF   78,W
0A5A:  MOVWF  2A
....................     display2_goster(); 
0A5B:  BCF    0A.3
0A5C:  CALL   238
0A5D:  BSF    0A.3
....................    
....................  if(input(arttir)){buton(); dakika++; while(input(arttir)){display2_goster();} if(dakika==60){dakika=0;} } 
0A5E:  BSF    20.6
0A5F:  MOVF   20,W
0A60:  BSF    03.5
0A61:  MOVWF  07
0A62:  BCF    03.5
0A63:  BTFSS  07.6
0A64:  GOTO   278
0A65:  BCF    0A.3
0A66:  CALL   0C6
0A67:  BSF    0A.3
0A68:  INCF   22,F
0A69:  BSF    20.6
0A6A:  MOVF   20,W
0A6B:  BSF    03.5
0A6C:  MOVWF  07
0A6D:  BCF    03.5
0A6E:  BTFSS  07.6
0A6F:  GOTO   274
0A70:  BCF    0A.3
0A71:  CALL   238
0A72:  BSF    0A.3
0A73:  GOTO   269
0A74:  MOVF   22,W
0A75:  SUBLW  3C
0A76:  BTFSC  03.2
0A77:  CLRF   22
....................  if(input(azalt)){buton(); dakika--; while(input(azalt)){display2_goster();} if(dakika==-1){dakika=59;} }  
0A78:  BSF    20.7
0A79:  MOVF   20,W
0A7A:  BSF    03.5
0A7B:  MOVWF  07
0A7C:  BCF    03.5
0A7D:  BTFSS  07.7
0A7E:  GOTO   294
0A7F:  BCF    0A.3
0A80:  CALL   0C6
0A81:  BSF    0A.3
0A82:  DECF   22,F
0A83:  BSF    20.7
0A84:  MOVF   20,W
0A85:  BSF    03.5
0A86:  MOVWF  07
0A87:  BCF    03.5
0A88:  BTFSS  07.7
0A89:  GOTO   28E
0A8A:  BCF    0A.3
0A8B:  CALL   238
0A8C:  BSF    0A.3
0A8D:  GOTO   283
0A8E:  MOVF   22,W
0A8F:  SUBLW  FF
0A90:  BTFSS  03.2
0A91:  GOTO   294
0A92:  MOVLW  3B
0A93:  MOVWF  22
....................  if(input(mod)){buton(); while(input(mod)){display2_goster();} mod_degeri=3; goto mod2_cik;}                                     
0A94:  BSF    20.5
0A95:  MOVF   20,W
0A96:  BSF    03.5
0A97:  MOVWF  07
0A98:  BCF    03.5
0A99:  BTFSS  07.5
0A9A:  GOTO   2AC
0A9B:  BCF    0A.3
0A9C:  CALL   0C6
0A9D:  BSF    0A.3
0A9E:  BSF    20.5
0A9F:  MOVF   20,W
0AA0:  BSF    03.5
0AA1:  MOVWF  07
0AA2:  BCF    03.5
0AA3:  BTFSS  07.5
0AA4:  GOTO   2A9
0AA5:  BCF    0A.3
0AA6:  CALL   238
0AA7:  BSF    0A.3
0AA8:  GOTO   29E
0AA9:  MOVLW  03
0AAA:  MOVWF  34
0AAB:  GOTO   2D6
....................  write_eeprom((3*alarm_sira-1),dakika); 
0AAC:  MOVLW  03
0AAD:  MOVWF  41
0AAE:  MOVF   32,W
0AAF:  MOVWF  42
0AB0:  BCF    0A.3
0AB1:  CALL   126
0AB2:  BSF    0A.3
0AB3:  MOVLW  01
0AB4:  SUBWF  78,W
0AB5:  MOVWF  38
0AB6:  MOVF   0B,W
0AB7:  MOVWF  77
0AB8:  BCF    0B.7
0AB9:  MOVF   38,W
0ABA:  BSF    03.6
0ABB:  MOVWF  0D
0ABC:  BCF    03.6
0ABD:  MOVF   22,W
0ABE:  BSF    03.6
0ABF:  MOVWF  0C
0AC0:  BSF    03.5
0AC1:  BCF    0C.7
0AC2:  BSF    0C.2
0AC3:  MOVLW  55
0AC4:  MOVWF  0D
0AC5:  MOVLW  AA
0AC6:  MOVWF  0D
0AC7:  BSF    0C.1
0AC8:  BTFSC  0C.1
0AC9:  GOTO   2C8
0ACA:  BCF    0C.2
0ACB:  MOVF   77,W
0ACC:  BCF    03.5
0ACD:  BCF    03.6
0ACE:  IORWF  0B,F
....................  delay_ms(5); 
0ACF:  MOVLW  05
0AD0:  MOVWF  41
0AD1:  BCF    0A.3
0AD2:  CALL   0B1
0AD3:  BSF    0A.3
0AD4:  GOTO   249
.................... }  
0AD5:  GOTO   245
.................... }  
.................... mod2_cik: 
....................  
....................  while(mod_degeri==3) 
0AD6:  MOVF   34,W
0AD7:  SUBLW  03
0AD8:  BTFSS  03.2
0AD9:  GOTO   365
....................  {    
....................      
....................   for(;;) 
....................   {   
....................     display3_birler=saniye%10;              
0ADA:  MOVF   21,W
0ADB:  MOVWF  3B
0ADC:  MOVLW  0A
0ADD:  MOVWF  3C
0ADE:  BCF    0A.3
0ADF:  CALL   166
0AE0:  BSF    0A.3
0AE1:  MOVF   77,W
0AE2:  MOVWF  2D
....................     display3_onlar=saniye/10;             
0AE3:  MOVF   21,W
0AE4:  MOVWF  3B
0AE5:  MOVLW  0A
0AE6:  MOVWF  3C
0AE7:  BCF    0A.3
0AE8:  CALL   166
0AE9:  BSF    0A.3
0AEA:  MOVF   78,W
0AEB:  MOVWF  2C
....................     display3_goster(); 
0AEC:  BCF    0A.3
0AED:  CALL   277
0AEE:  BSF    0A.3
....................                                        
....................  if(input(arttir)){buton(); saniye++; while(input(arttir)){display3_goster();} if(saniye==60){saniye=0;} } 
0AEF:  BSF    20.6
0AF0:  MOVF   20,W
0AF1:  BSF    03.5
0AF2:  MOVWF  07
0AF3:  BCF    03.5
0AF4:  BTFSS  07.6
0AF5:  GOTO   309
0AF6:  BCF    0A.3
0AF7:  CALL   0C6
0AF8:  BSF    0A.3
0AF9:  INCF   21,F
0AFA:  BSF    20.6
0AFB:  MOVF   20,W
0AFC:  BSF    03.5
0AFD:  MOVWF  07
0AFE:  BCF    03.5
0AFF:  BTFSS  07.6
0B00:  GOTO   305
0B01:  BCF    0A.3
0B02:  CALL   277
0B03:  BSF    0A.3
0B04:  GOTO   2FA
0B05:  MOVF   21,W
0B06:  SUBLW  3C
0B07:  BTFSC  03.2
0B08:  CLRF   21
....................  if(input(azalt)){buton(); saniye--; while(input(azalt)){display3_goster();} if(saniye==-1){saniye=59;} } 
0B09:  BSF    20.7
0B0A:  MOVF   20,W
0B0B:  BSF    03.5
0B0C:  MOVWF  07
0B0D:  BCF    03.5
0B0E:  BTFSS  07.7
0B0F:  GOTO   325
0B10:  BCF    0A.3
0B11:  CALL   0C6
0B12:  BSF    0A.3
0B13:  DECF   21,F
0B14:  BSF    20.7
0B15:  MOVF   20,W
0B16:  BSF    03.5
0B17:  MOVWF  07
0B18:  BCF    03.5
0B19:  BTFSS  07.7
0B1A:  GOTO   31F
0B1B:  BCF    0A.3
0B1C:  CALL   277
0B1D:  BSF    0A.3
0B1E:  GOTO   314
0B1F:  MOVF   21,W
0B20:  SUBLW  FF
0B21:  BTFSS  03.2
0B22:  GOTO   325
0B23:  MOVLW  3B
0B24:  MOVWF  21
....................  if(input(mod)){buton(); while(input(mod)){display3_goster();} mod_degeri=0; goto alarmdan_cik;} 
0B25:  BSF    20.5
0B26:  MOVF   20,W
0B27:  BSF    03.5
0B28:  MOVWF  07
0B29:  BCF    03.5
0B2A:  BTFSS  07.5
0B2B:  GOTO   33C
0B2C:  BCF    0A.3
0B2D:  CALL   0C6
0B2E:  BSF    0A.3
0B2F:  BSF    20.5
0B30:  MOVF   20,W
0B31:  BSF    03.5
0B32:  MOVWF  07
0B33:  BCF    03.5
0B34:  BTFSS  07.5
0B35:  GOTO   33A
0B36:  BCF    0A.3
0B37:  CALL   277
0B38:  BSF    0A.3
0B39:  GOTO   32F
0B3A:  CLRF   34
0B3B:  GOTO   367
....................  write_eeprom((3*alarm_sira),saniye); 
0B3C:  MOVLW  03
0B3D:  MOVWF  41
0B3E:  MOVF   32,W
0B3F:  MOVWF  42
0B40:  BCF    0A.3
0B41:  CALL   126
0B42:  BSF    0A.3
0B43:  MOVF   78,W
0B44:  MOVWF  38
0B45:  MOVF   0B,W
0B46:  MOVWF  77
0B47:  BCF    0B.7
0B48:  MOVF   38,W
0B49:  BSF    03.6
0B4A:  MOVWF  0D
0B4B:  BCF    03.6
0B4C:  MOVF   21,W
0B4D:  BSF    03.6
0B4E:  MOVWF  0C
0B4F:  BSF    03.5
0B50:  BCF    0C.7
0B51:  BSF    0C.2
0B52:  MOVLW  55
0B53:  MOVWF  0D
0B54:  MOVLW  AA
0B55:  MOVWF  0D
0B56:  BSF    0C.1
0B57:  BTFSC  0C.1
0B58:  GOTO   357
0B59:  BCF    0C.2
0B5A:  MOVF   77,W
0B5B:  BCF    03.5
0B5C:  BCF    03.6
0B5D:  IORWF  0B,F
....................  delay_ms(5); 
0B5E:  MOVLW  05
0B5F:  MOVWF  41
0B60:  BCF    0A.3
0B61:  CALL   0B1
0B62:  BSF    0A.3
0B63:  GOTO   2DA
....................   } 
0B64:  GOTO   2D6
.................... }             
.................... delay_us(1); 
0B65:  NOP
0B66:  GOTO   095
.................... } 
....................  
.................... alarmdan_cik: 
.................... gecis_animasyon(); 
0B67:  BCF    0A.3
0B68:  CALL   2B6
0B69:  BSF    0A.3
0B6A:  RETURN
.................... }////////////////////////////////////////////////////////////////////////////// 
.................... void ayarlar() 
.................... { 
....................   if (input(set)) 
*
02D5:  BSF    20.4
02D6:  MOVF   20,W
02D7:  BSF    03.5
02D8:  MOVWF  07
02D9:  BCF    03.5
02DA:  BTFSS  07.4
02DB:  GOTO   2E8
....................   { 
....................    while(input(set)) 
02DC:  BSF    20.4
02DD:  MOVF   20,W
02DE:  BSF    03.5
02DF:  MOVWF  07
02E0:  BCF    03.5
02E1:  BTFSS  07.4
02E2:  GOTO   2E5
....................    { 
....................       ekran(); 
02E3:  CALL   0F7
02E4:  GOTO   2DC
....................    } 
....................   set_degeri=1; 
02E5:  MOVLW  01
02E6:  MOVWF  33
....................   } 
02E7:  GOTO   2E9
....................   else { goto ayardan_cik; } 
02E8:  GOTO   62B
....................  
.................... while(set_degeri==1) //saat ayarý             
02E9:  DECFSZ 33,W
02EA:  GOTO   483
.................... { 
....................  
.................... rtc_get_time(saat,dakika,saniye); 
.................... display1_birler=saat%10; 
*
0306:  MOVF   23,W
0307:  MOVWF  3B
0308:  MOVLW  0A
0309:  MOVWF  3C
030A:  CALL   166
030B:  MOVF   77,W
030C:  MOVWF  29
.................... display1_onlar=saat/10; 
030D:  MOVF   23,W
030E:  MOVWF  3B
030F:  MOVLW  0A
0310:  MOVWF  3C
0311:  CALL   166
0312:  MOVF   78,W
0313:  MOVWF  28
.................... display2_birler= dakika%10; 
0314:  MOVF   22,W
0315:  MOVWF  3B
0316:  MOVLW  0A
0317:  MOVWF  3C
0318:  CALL   166
0319:  MOVF   77,W
031A:  MOVWF  2B
.................... display2_onlar=dakika/10; 
031B:  MOVF   22,W
031C:  MOVWF  3B
031D:  MOVLW  0A
031E:  MOVWF  3C
031F:  CALL   166
0320:  MOVF   78,W
0321:  MOVWF  2A
.................... display3_birler=saniye%10; 
0322:  MOVF   21,W
0323:  MOVWF  3B
0324:  MOVLW  0A
0325:  MOVWF  3C
0326:  CALL   166
0327:  MOVF   77,W
0328:  MOVWF  2D
.................... display3_onlar=saniye/10; 
0329:  MOVF   21,W
032A:  MOVWF  3B
032B:  MOVLW  0A
032C:  MOVWF  3C
032D:  CALL   166
032E:  MOVF   78,W
032F:  MOVWF  2C
.................... set_konumunda_display_goster(); 
0330:  CALL   17B
....................  
.................... if(input(set)){buton();  while(input(set)){ekran();} set_degeri=2; goto set1_den_cik; } 
0331:  BSF    20.4
0332:  MOVF   20,W
0333:  BSF    03.5
0334:  MOVWF  07
0335:  BCF    03.5
0336:  BTFSS  07.4
0337:  GOTO   345
0338:  CALL   0C6
0339:  BSF    20.4
033A:  MOVF   20,W
033B:  BSF    03.5
033C:  MOVWF  07
033D:  BCF    03.5
033E:  BTFSS  07.4
033F:  GOTO   342
0340:  CALL   0F7
0341:  GOTO   339
0342:  MOVLW  02
0343:  MOVWF  33
0344:  GOTO   483
....................                     
.................... if(input(mod)){buton();  while(input(mod)){ekran();} mod_degeri=1; } 
0345:  BSF    20.5
0346:  MOVF   20,W
0347:  BSF    03.5
0348:  MOVWF  07
0349:  BCF    03.5
034A:  BTFSS  07.5
034B:  GOTO   358
034C:  CALL   0C6
034D:  BSF    20.5
034E:  MOVF   20,W
034F:  BSF    03.5
0350:  MOVWF  07
0351:  BCF    03.5
0352:  BTFSS  07.5
0353:  GOTO   356
0354:  CALL   0F7
0355:  GOTO   34D
0356:  MOVLW  01
0357:  MOVWF  34
....................                           
....................  while(mod_degeri==1)   //saat ayarlanýyor. 
0358:  DECFSZ 34,W
0359:  GOTO   3BA
....................  {  
....................        
....................   for(;;)                
....................   {             
....................     display1_birler=saat%10;              
035A:  MOVF   23,W
035B:  MOVWF  3B
035C:  MOVLW  0A
035D:  MOVWF  3C
035E:  CALL   166
035F:  MOVF   77,W
0360:  MOVWF  29
....................     display1_onlar=saat/10;             
0361:  MOVF   23,W
0362:  MOVWF  3B
0363:  MOVLW  0A
0364:  MOVWF  3C
0365:  CALL   166
0366:  MOVF   78,W
0367:  MOVWF  28
....................     display1_goster(); 
0368:  CALL   1E2
....................                                                                 
....................  if(input(arttir)){buton(); saat++; while(input(arttir)){display1_goster();} if(saat==24){saat=0;} } 
0369:  BSF    20.6
036A:  MOVF   20,W
036B:  BSF    03.5
036C:  MOVWF  07
036D:  BCF    03.5
036E:  BTFSS  07.6
036F:  GOTO   37F
0370:  CALL   0C6
0371:  INCF   23,F
0372:  BSF    20.6
0373:  MOVF   20,W
0374:  BSF    03.5
0375:  MOVWF  07
0376:  BCF    03.5
0377:  BTFSS  07.6
0378:  GOTO   37B
0379:  CALL   1E2
037A:  GOTO   372
037B:  MOVF   23,W
037C:  SUBLW  18
037D:  BTFSC  03.2
037E:  CLRF   23
....................  if(input(azalt)){buton(); saat--; while(input(azalt)){display1_goster();} if(saat==-1){saat=23;} } 
037F:  BSF    20.7
0380:  MOVF   20,W
0381:  BSF    03.5
0382:  MOVWF  07
0383:  BCF    03.5
0384:  BTFSS  07.7
0385:  GOTO   397
0386:  CALL   0C6
0387:  DECF   23,F
0388:  BSF    20.7
0389:  MOVF   20,W
038A:  BSF    03.5
038B:  MOVWF  07
038C:  BCF    03.5
038D:  BTFSS  07.7
038E:  GOTO   391
038F:  CALL   1E2
0390:  GOTO   388
0391:  MOVF   23,W
0392:  SUBLW  FF
0393:  BTFSS  03.2
0394:  GOTO   397
0395:  MOVLW  17
0396:  MOVWF  23
....................  if(input(mod)){buton(); while(input(mod)){display1_goster();} mod_degeri=2; goto mod1s_cik;}                                     
0397:  BSF    20.5
0398:  MOVF   20,W
0399:  BSF    03.5
039A:  MOVWF  07
039B:  BCF    03.5
039C:  BTFSS  07.5
039D:  GOTO   3AB
039E:  CALL   0C6
039F:  BSF    20.5
03A0:  MOVF   20,W
03A1:  BSF    03.5
03A2:  MOVWF  07
03A3:  BCF    03.5
03A4:  BTFSS  07.5
03A5:  GOTO   3A8
03A6:  CALL   1E2
03A7:  GOTO   39F
03A8:  MOVLW  02
03A9:  MOVWF  34
03AA:  GOTO   3BA
....................  write_ds1302(0x84,get_bcd(saat)); //saat degeri gonder. 0-23  
03AB:  MOVF   23,W
03AC:  MOVWF  38
03AD:  CALL   221
03AE:  MOVF   78,W
03AF:  MOVWF  38
03B0:  MOVLW  84
03B1:  MOVWF  39
03B2:  MOVF   78,W
03B3:  MOVWF  3A
03B4:  CALL   040
....................  delay_ms(5); 
03B5:  MOVLW  05
03B6:  MOVWF  41
03B7:  CALL   0B1
03B8:  GOTO   35A
.................... } //for smod1  
03B9:  GOTO   358
.................... } //while mod deger = 1 
.................... mod1s_cik: 
....................                             
....................  while(mod_degeri==2)   //dakika ayarlanýyor. 
03BA:  MOVF   34,W
03BB:  SUBLW  02
03BC:  BTFSS  03.2
03BD:  GOTO   41E
....................  {                               
....................  
....................   for(;;)                
....................   {                       
....................     display2_birler=dakika%10;              
03BE:  MOVF   22,W
03BF:  MOVWF  3B
03C0:  MOVLW  0A
03C1:  MOVWF  3C
03C2:  CALL   166
03C3:  MOVF   77,W
03C4:  MOVWF  2B
....................     display2_onlar=dakika/10;             
03C5:  MOVF   22,W
03C6:  MOVWF  3B
03C7:  MOVLW  0A
03C8:  MOVWF  3C
03C9:  CALL   166
03CA:  MOVF   78,W
03CB:  MOVWF  2A
....................     display2_goster(); 
03CC:  CALL   238
....................    
....................  if(input(arttir)){buton(); dakika++; while(input(arttir)){display2_goster();} if(dakika==60){dakika=0;} } 
03CD:  BSF    20.6
03CE:  MOVF   20,W
03CF:  BSF    03.5
03D0:  MOVWF  07
03D1:  BCF    03.5
03D2:  BTFSS  07.6
03D3:  GOTO   3E3
03D4:  CALL   0C6
03D5:  INCF   22,F
03D6:  BSF    20.6
03D7:  MOVF   20,W
03D8:  BSF    03.5
03D9:  MOVWF  07
03DA:  BCF    03.5
03DB:  BTFSS  07.6
03DC:  GOTO   3DF
03DD:  CALL   238
03DE:  GOTO   3D6
03DF:  MOVF   22,W
03E0:  SUBLW  3C
03E1:  BTFSC  03.2
03E2:  CLRF   22
....................  if(input(azalt)){buton(); dakika--; while(input(azalt)){display2_goster();} if(dakika==-1){dakika=59;} }  
03E3:  BSF    20.7
03E4:  MOVF   20,W
03E5:  BSF    03.5
03E6:  MOVWF  07
03E7:  BCF    03.5
03E8:  BTFSS  07.7
03E9:  GOTO   3FB
03EA:  CALL   0C6
03EB:  DECF   22,F
03EC:  BSF    20.7
03ED:  MOVF   20,W
03EE:  BSF    03.5
03EF:  MOVWF  07
03F0:  BCF    03.5
03F1:  BTFSS  07.7
03F2:  GOTO   3F5
03F3:  CALL   238
03F4:  GOTO   3EC
03F5:  MOVF   22,W
03F6:  SUBLW  FF
03F7:  BTFSS  03.2
03F8:  GOTO   3FB
03F9:  MOVLW  3B
03FA:  MOVWF  22
....................  if(input(mod)){buton(); while(input(mod)){display2_goster();} mod_degeri=3; goto mod2s_cik;}                                     
03FB:  BSF    20.5
03FC:  MOVF   20,W
03FD:  BSF    03.5
03FE:  MOVWF  07
03FF:  BCF    03.5
0400:  BTFSS  07.5
0401:  GOTO   40F
0402:  CALL   0C6
0403:  BSF    20.5
0404:  MOVF   20,W
0405:  BSF    03.5
0406:  MOVWF  07
0407:  BCF    03.5
0408:  BTFSS  07.5
0409:  GOTO   40C
040A:  CALL   238
040B:  GOTO   403
040C:  MOVLW  03
040D:  MOVWF  34
040E:  GOTO   41E
....................  write_ds1302(0x82,get_bcd(dakika)); //dakika degeri gonder. 00-59   
040F:  MOVF   22,W
0410:  MOVWF  38
0411:  CALL   221
0412:  MOVF   78,W
0413:  MOVWF  38
0414:  MOVLW  82
0415:  MOVWF  39
0416:  MOVF   78,W
0417:  MOVWF  3A
0418:  CALL   040
....................  delay_ms(5); 
0419:  MOVLW  05
041A:  MOVWF  41
041B:  CALL   0B1
041C:  GOTO   3BE
.................... } //for smod2 
041D:  GOTO   3BA
.................... } //while mod deger = 2  
.................... mod2s_cik:    
....................  
....................  while(mod_degeri==3)   //saniye ayarlanýyor. 
041E:  MOVF   34,W
041F:  SUBLW  03
0420:  BTFSS  03.2
0421:  GOTO   481
....................  {    
....................      
....................   for(;;) 
....................   {   
....................     display3_birler=saniye%10;              
0422:  MOVF   21,W
0423:  MOVWF  3B
0424:  MOVLW  0A
0425:  MOVWF  3C
0426:  CALL   166
0427:  MOVF   77,W
0428:  MOVWF  2D
....................     display3_onlar=saniye/10;             
0429:  MOVF   21,W
042A:  MOVWF  3B
042B:  MOVLW  0A
042C:  MOVWF  3C
042D:  CALL   166
042E:  MOVF   78,W
042F:  MOVWF  2C
....................     display3_goster(); 
0430:  CALL   277
....................                                        
....................  if(input(arttir)){buton(); saniye++; while(input(arttir)){display3_goster();} if(saniye==60){saniye=0;} } 
0431:  BSF    20.6
0432:  MOVF   20,W
0433:  BSF    03.5
0434:  MOVWF  07
0435:  BCF    03.5
0436:  BTFSS  07.6
0437:  GOTO   447
0438:  CALL   0C6
0439:  INCF   21,F
043A:  BSF    20.6
043B:  MOVF   20,W
043C:  BSF    03.5
043D:  MOVWF  07
043E:  BCF    03.5
043F:  BTFSS  07.6
0440:  GOTO   443
0441:  CALL   277
0442:  GOTO   43A
0443:  MOVF   21,W
0444:  SUBLW  3C
0445:  BTFSC  03.2
0446:  CLRF   21
....................  if(input(azalt)){buton(); saniye--; while(input(azalt)){display3_goster();} if(saniye==-1){saniye=59;} } 
0447:  BSF    20.7
0448:  MOVF   20,W
0449:  BSF    03.5
044A:  MOVWF  07
044B:  BCF    03.5
044C:  BTFSS  07.7
044D:  GOTO   45F
044E:  CALL   0C6
044F:  DECF   21,F
0450:  BSF    20.7
0451:  MOVF   20,W
0452:  BSF    03.5
0453:  MOVWF  07
0454:  BCF    03.5
0455:  BTFSS  07.7
0456:  GOTO   459
0457:  CALL   277
0458:  GOTO   450
0459:  MOVF   21,W
045A:  SUBLW  FF
045B:  BTFSS  03.2
045C:  GOTO   45F
045D:  MOVLW  3B
045E:  MOVWF  21
....................  if(input(mod)){buton(); while(input(mod)){display3_goster();} mod_degeri=0; goto mod3s_cik;}                                     
045F:  BSF    20.5
0460:  MOVF   20,W
0461:  BSF    03.5
0462:  MOVWF  07
0463:  BCF    03.5
0464:  BTFSS  07.5
0465:  GOTO   472
0466:  CALL   0C6
0467:  BSF    20.5
0468:  MOVF   20,W
0469:  BSF    03.5
046A:  MOVWF  07
046B:  BCF    03.5
046C:  BTFSS  07.5
046D:  GOTO   470
046E:  CALL   277
046F:  GOTO   467
0470:  CLRF   34
0471:  GOTO   481
....................  write_ds1302(0x80,get_bcd(saniye)); //saniye degeri gonder. 00-59 
0472:  MOVF   21,W
0473:  MOVWF  38
0474:  CALL   221
0475:  MOVF   78,W
0476:  MOVWF  38
0477:  MOVLW  80
0478:  MOVWF  39
0479:  MOVF   78,W
047A:  MOVWF  3A
047B:  CALL   040
....................  delay_ms(5); 
047C:  MOVLW  05
047D:  MOVWF  41
047E:  CALL   0B1
047F:  GOTO   422
.................... } //for smod3          
0480:  GOTO   41E
.................... } //while mod deger = 3  
.................... mod3s_cik: 
....................                             
.................... delay_us(1); 
0481:  NOP
0482:  GOTO   2E9
.................... } // while set deger = 1  
.................... set1_den_cik: 
.................... gecis_animasyon(); 
0483:  CALL   2B6
....................  
....................  while(set_degeri==2) //tarih ayarý             
0484:  MOVF   33,W
0485:  SUBLW  02
0486:  BTFSS  03.2
0487:  GOTO   62A
.................... { 
....................  
.................... rtc_get_date(gun,ay,yil,haftanin_gunu);  
.................... display1_birler=gun%10;                                               
*
04AC:  MOVF   24,W
04AD:  MOVWF  3B
04AE:  MOVLW  0A
04AF:  MOVWF  3C
04B0:  CALL   166
04B1:  MOVF   77,W
04B2:  MOVWF  29
.................... display1_onlar=gun/10;                                               
04B3:  MOVF   24,W
04B4:  MOVWF  3B
04B5:  MOVLW  0A
04B6:  MOVWF  3C
04B7:  CALL   166
04B8:  MOVF   78,W
04B9:  MOVWF  28
.................... display2_birler= ay%10; 
04BA:  MOVF   25,W
04BB:  MOVWF  3B
04BC:  MOVLW  0A
04BD:  MOVWF  3C
04BE:  CALL   166
04BF:  MOVF   77,W
04C0:  MOVWF  2B
.................... display2_onlar=ay/10;                                               
04C1:  MOVF   25,W
04C2:  MOVWF  3B
04C3:  MOVLW  0A
04C4:  MOVWF  3C
04C5:  CALL   166
04C6:  MOVF   78,W
04C7:  MOVWF  2A
.................... display3_birler=yil%10;          
04C8:  MOVF   26,W
04C9:  MOVWF  3B
04CA:  MOVLW  0A
04CB:  MOVWF  3C
04CC:  CALL   166
04CD:  MOVF   77,W
04CE:  MOVWF  2D
.................... display3_onlar=yil/10;   
04CF:  MOVF   26,W
04D0:  MOVWF  3B
04D1:  MOVLW  0A
04D2:  MOVWF  3C
04D3:  CALL   166
04D4:  MOVF   78,W
04D5:  MOVWF  2C
.................... set_konumunda_display_goster();                                                
04D6:  CALL   17B
....................  
.................... if(input(set)){buton();  while(input(set)){ekran();} set_degeri=0; goto set2_den_cik; } 
04D7:  BSF    20.4
04D8:  MOVF   20,W
04D9:  BSF    03.5
04DA:  MOVWF  07
04DB:  BCF    03.5
04DC:  BTFSS  07.4
04DD:  GOTO   4EA
04DE:  CALL   0C6
04DF:  BSF    20.4
04E0:  MOVF   20,W
04E1:  BSF    03.5
04E2:  MOVWF  07
04E3:  BCF    03.5
04E4:  BTFSS  07.4
04E5:  GOTO   4E8
04E6:  CALL   0F7
04E7:  GOTO   4DF
04E8:  CLRF   33
04E9:  GOTO   62A
....................                                                                 
.................... if(input(mod)){buton(); while(input(mod)){ekran();} mod_degeri=1; } 
04EA:  BSF    20.5
04EB:  MOVF   20,W
04EC:  BSF    03.5
04ED:  MOVWF  07
04EE:  BCF    03.5
04EF:  BTFSS  07.5
04F0:  GOTO   4FD
04F1:  CALL   0C6
04F2:  BSF    20.5
04F3:  MOVF   20,W
04F4:  BSF    03.5
04F5:  MOVWF  07
04F6:  BCF    03.5
04F7:  BTFSS  07.5
04F8:  GOTO   4FB
04F9:  CALL   0F7
04FA:  GOTO   4F2
04FB:  MOVLW  01
04FC:  MOVWF  34
....................                           
....................  while(mod_degeri==1)  //gun ayarlanýyor. 
04FD:  DECFSZ 34,W
04FE:  GOTO   560
....................  {  
....................        
....................   for(;;)                
....................   {             
....................     display1_birler=gun%10;              
04FF:  MOVF   24,W
0500:  MOVWF  3B
0501:  MOVLW  0A
0502:  MOVWF  3C
0503:  CALL   166
0504:  MOVF   77,W
0505:  MOVWF  29
....................     display1_onlar=gun/10;             
0506:  MOVF   24,W
0507:  MOVWF  3B
0508:  MOVLW  0A
0509:  MOVWF  3C
050A:  CALL   166
050B:  MOVF   78,W
050C:  MOVWF  28
....................     display1_goster(); 
050D:  CALL   1E2
....................                                                                 
....................  if(input(arttir)){buton(); gun++; while(input(arttir)){display1_goster();} if(gun==32){gun=1;} } 
050E:  BSF    20.6
050F:  MOVF   20,W
0510:  BSF    03.5
0511:  MOVWF  07
0512:  BCF    03.5
0513:  BTFSS  07.6
0514:  GOTO   526
0515:  CALL   0C6
0516:  INCF   24,F
0517:  BSF    20.6
0518:  MOVF   20,W
0519:  BSF    03.5
051A:  MOVWF  07
051B:  BCF    03.5
051C:  BTFSS  07.6
051D:  GOTO   520
051E:  CALL   1E2
051F:  GOTO   517
0520:  MOVF   24,W
0521:  SUBLW  20
0522:  BTFSS  03.2
0523:  GOTO   526
0524:  MOVLW  01
0525:  MOVWF  24
....................  if(input(azalt)){buton(); gun--; while(input(azalt)){display1_goster();} if(gun==0){gun=31;} } 
0526:  BSF    20.7
0527:  MOVF   20,W
0528:  BSF    03.5
0529:  MOVWF  07
052A:  BCF    03.5
052B:  BTFSS  07.7
052C:  GOTO   53D
052D:  CALL   0C6
052E:  DECF   24,F
052F:  BSF    20.7
0530:  MOVF   20,W
0531:  BSF    03.5
0532:  MOVWF  07
0533:  BCF    03.5
0534:  BTFSS  07.7
0535:  GOTO   538
0536:  CALL   1E2
0537:  GOTO   52F
0538:  MOVF   24,F
0539:  BTFSS  03.2
053A:  GOTO   53D
053B:  MOVLW  1F
053C:  MOVWF  24
....................  if(input(mod)){buton(); while(input(mod)){display1_goster();} mod_degeri=2; goto mod1t_cik;}                                     
053D:  BSF    20.5
053E:  MOVF   20,W
053F:  BSF    03.5
0540:  MOVWF  07
0541:  BCF    03.5
0542:  BTFSS  07.5
0543:  GOTO   551
0544:  CALL   0C6
0545:  BSF    20.5
0546:  MOVF   20,W
0547:  BSF    03.5
0548:  MOVWF  07
0549:  BCF    03.5
054A:  BTFSS  07.5
054B:  GOTO   54E
054C:  CALL   1E2
054D:  GOTO   545
054E:  MOVLW  02
054F:  MOVWF  34
0550:  GOTO   560
....................  write_ds1302(0x86,get_bcd(gun)); //gun degeri gonder. 1-31  
0551:  MOVF   24,W
0552:  MOVWF  38
0553:  CALL   221
0554:  MOVF   78,W
0555:  MOVWF  38
0556:  MOVLW  86
0557:  MOVWF  39
0558:  MOVF   78,W
0559:  MOVWF  3A
055A:  CALL   040
....................  delay_ms(5); 
055B:  MOVLW  05
055C:  MOVWF  41
055D:  CALL   0B1
055E:  GOTO   4FF
.................... } //for tmod1  
055F:  GOTO   4FD
.................... } //while mod deger = 1 
.................... mod1t_cik:                    
....................                             
....................  while(mod_degeri==2)    //ay ayarlanýyor. 
0560:  MOVF   34,W
0561:  SUBLW  02
0562:  BTFSS  03.2
0563:  GOTO   5C5
....................  {  
....................  
....................   for(;;)                
....................   {                       
....................     display2_birler=ay%10;              
0564:  MOVF   25,W
0565:  MOVWF  3B
0566:  MOVLW  0A
0567:  MOVWF  3C
0568:  CALL   166
0569:  MOVF   77,W
056A:  MOVWF  2B
....................     display2_onlar=ay/10;             
056B:  MOVF   25,W
056C:  MOVWF  3B
056D:  MOVLW  0A
056E:  MOVWF  3C
056F:  CALL   166
0570:  MOVF   78,W
0571:  MOVWF  2A
....................     display2_goster(); 
0572:  CALL   238
....................    
....................  if(input(arttir)){buton(); ay++; while(input(arttir)){display2_goster();} if(ay==13){ay=1;} } 
0573:  BSF    20.6
0574:  MOVF   20,W
0575:  BSF    03.5
0576:  MOVWF  07
0577:  BCF    03.5
0578:  BTFSS  07.6
0579:  GOTO   58B
057A:  CALL   0C6
057B:  INCF   25,F
057C:  BSF    20.6
057D:  MOVF   20,W
057E:  BSF    03.5
057F:  MOVWF  07
0580:  BCF    03.5
0581:  BTFSS  07.6
0582:  GOTO   585
0583:  CALL   238
0584:  GOTO   57C
0585:  MOVF   25,W
0586:  SUBLW  0D
0587:  BTFSS  03.2
0588:  GOTO   58B
0589:  MOVLW  01
058A:  MOVWF  25
....................  if(input(azalt)){buton(); ay--; while(input(azalt)){display2_goster();} if(ay==0){ay=12;} }  
058B:  BSF    20.7
058C:  MOVF   20,W
058D:  BSF    03.5
058E:  MOVWF  07
058F:  BCF    03.5
0590:  BTFSS  07.7
0591:  GOTO   5A2
0592:  CALL   0C6
0593:  DECF   25,F
0594:  BSF    20.7
0595:  MOVF   20,W
0596:  BSF    03.5
0597:  MOVWF  07
0598:  BCF    03.5
0599:  BTFSS  07.7
059A:  GOTO   59D
059B:  CALL   238
059C:  GOTO   594
059D:  MOVF   25,F
059E:  BTFSS  03.2
059F:  GOTO   5A2
05A0:  MOVLW  0C
05A1:  MOVWF  25
....................  if(input(mod)){buton(); while(input(mod)){display2_goster();} mod_degeri=3; goto mod2t_cik;}                                     
05A2:  BSF    20.5
05A3:  MOVF   20,W
05A4:  BSF    03.5
05A5:  MOVWF  07
05A6:  BCF    03.5
05A7:  BTFSS  07.5
05A8:  GOTO   5B6
05A9:  CALL   0C6
05AA:  BSF    20.5
05AB:  MOVF   20,W
05AC:  BSF    03.5
05AD:  MOVWF  07
05AE:  BCF    03.5
05AF:  BTFSS  07.5
05B0:  GOTO   5B3
05B1:  CALL   238
05B2:  GOTO   5AA
05B3:  MOVLW  03
05B4:  MOVWF  34
05B5:  GOTO   5C5
....................  write_ds1302(0x88,get_bcd(ay)); //ay degeri gonder. 1-12 
05B6:  MOVF   25,W
05B7:  MOVWF  38
05B8:  CALL   221
05B9:  MOVF   78,W
05BA:  MOVWF  38
05BB:  MOVLW  88
05BC:  MOVWF  39
05BD:  MOVF   78,W
05BE:  MOVWF  3A
05BF:  CALL   040
....................  delay_ms(5); 
05C0:  MOVLW  05
05C1:  MOVWF  41
05C2:  CALL   0B1
05C3:  GOTO   564
.................... } //for tmod2  
05C4:  GOTO   560
.................... } //while mod deger = 2  
.................... mod2t_cik: 
....................  
....................  while(mod_degeri==3)  //yil ayarlanýyor. 
05C5:  MOVF   34,W
05C6:  SUBLW  03
05C7:  BTFSS  03.2
05C8:  GOTO   628
....................  {    
....................      
....................   for(;;) 
....................   {   
....................     display3_birler=yil%10;              
05C9:  MOVF   26,W
05CA:  MOVWF  3B
05CB:  MOVLW  0A
05CC:  MOVWF  3C
05CD:  CALL   166
05CE:  MOVF   77,W
05CF:  MOVWF  2D
....................     display3_onlar=yil/10;             
05D0:  MOVF   26,W
05D1:  MOVWF  3B
05D2:  MOVLW  0A
05D3:  MOVWF  3C
05D4:  CALL   166
05D5:  MOVF   78,W
05D6:  MOVWF  2C
....................     display3_goster(); 
05D7:  CALL   277
....................                                        
....................  if(input(arttir)){buton(); yil++; while(input(arttir)){display3_goster();} if(yil==100){yil=0;} } 
05D8:  BSF    20.6
05D9:  MOVF   20,W
05DA:  BSF    03.5
05DB:  MOVWF  07
05DC:  BCF    03.5
05DD:  BTFSS  07.6
05DE:  GOTO   5EE
05DF:  CALL   0C6
05E0:  INCF   26,F
05E1:  BSF    20.6
05E2:  MOVF   20,W
05E3:  BSF    03.5
05E4:  MOVWF  07
05E5:  BCF    03.5
05E6:  BTFSS  07.6
05E7:  GOTO   5EA
05E8:  CALL   277
05E9:  GOTO   5E1
05EA:  MOVF   26,W
05EB:  SUBLW  64
05EC:  BTFSC  03.2
05ED:  CLRF   26
....................  if(input(azalt)){buton(); yil--; while(input(azalt)){display3_goster();} if(yil==-1){yil=99;} } 
05EE:  BSF    20.7
05EF:  MOVF   20,W
05F0:  BSF    03.5
05F1:  MOVWF  07
05F2:  BCF    03.5
05F3:  BTFSS  07.7
05F4:  GOTO   606
05F5:  CALL   0C6
05F6:  DECF   26,F
05F7:  BSF    20.7
05F8:  MOVF   20,W
05F9:  BSF    03.5
05FA:  MOVWF  07
05FB:  BCF    03.5
05FC:  BTFSS  07.7
05FD:  GOTO   600
05FE:  CALL   277
05FF:  GOTO   5F7
0600:  MOVF   26,W
0601:  SUBLW  FF
0602:  BTFSS  03.2
0603:  GOTO   606
0604:  MOVLW  63
0605:  MOVWF  26
....................  if(input(mod)){buton(); while(input(mod)){display3_goster();} mod_degeri=0; goto mod3t_cik;}                                     
0606:  BSF    20.5
0607:  MOVF   20,W
0608:  BSF    03.5
0609:  MOVWF  07
060A:  BCF    03.5
060B:  BTFSS  07.5
060C:  GOTO   619
060D:  CALL   0C6
060E:  BSF    20.5
060F:  MOVF   20,W
0610:  BSF    03.5
0611:  MOVWF  07
0612:  BCF    03.5
0613:  BTFSS  07.5
0614:  GOTO   617
0615:  CALL   277
0616:  GOTO   60E
0617:  CLRF   34
0618:  GOTO   628
....................  write_ds1302(0x8C,get_bcd(yil)); //yil degeri gonder. 00-99 
0619:  MOVF   26,W
061A:  MOVWF  38
061B:  CALL   221
061C:  MOVF   78,W
061D:  MOVWF  38
061E:  MOVLW  8C
061F:  MOVWF  39
0620:  MOVF   78,W
0621:  MOVWF  3A
0622:  CALL   040
....................  delay_ms(5);                    
0623:  MOVLW  05
0624:  MOVWF  41
0625:  CALL   0B1
0626:  GOTO   5C9
.................... } //for tmod3         
0627:  GOTO   5C5
.................... } //while mod deger = 3  
.................... mod3t_cik: 
....................  
.................... delay_us(1); 
0628:  NOP
0629:  GOTO   484
.................... } // while set deger = 2  
.................... set2_den_cik: 
.................... gecis_animasyon(); 
062A:  CALL   2B6
....................  
.................... ayardan_cik: 
.................... output_e(0b000); //lambalar söndü 
062B:  BSF    03.5
062C:  BCF    09.0
062D:  BCF    09.1
062E:  BCF    09.2
062F:  BCF    03.5
0630:  CLRF   09
0631:  RETURN
.................... } // void ayar  
.................... /////////////////////////////////////////////////////////////////////////////// 
....................    void main() //baþlangýç 
*
1000:  MOVLW  FF
1001:  MOVWF  20
1002:  MOVLW  80
1003:  MOVWF  31
1004:  CLRF   33
1005:  CLRF   34
1006:  CLRF   37
1007:  BSF    03.5
1008:  BSF    1F.0
1009:  BSF    1F.1
100A:  BSF    1F.2
100B:  BCF    1F.3
100C:  MOVLW  07
100D:  MOVWF  1C
100E:  BCF    03.7
100F:  MOVLW  1F
1010:  ANDWF  03,F
.................... { 
....................  
....................  
....................    output_a(0x00); 
1011:  CLRF   05
1012:  BCF    03.5
1013:  CLRF   05
....................    output_b(0x00); 
1014:  BSF    03.5
1015:  CLRF   06
1016:  BCF    03.5
1017:  CLRF   06
....................    output_c(0x00); 
1018:  MOVLW  00
1019:  MOVWF  20
101A:  BSF    03.5
101B:  CLRF   07
101C:  BCF    03.5
101D:  CLRF   07
....................    output_d(0x00); 
101E:  BSF    03.5
101F:  CLRF   08
1020:  BCF    03.5
1021:  CLRF   08
....................    output_e(0x00); 
1022:  BSF    03.5
1023:  BCF    09.0
1024:  BCF    09.1
1025:  BCF    09.2
1026:  BCF    03.5
1027:  CLRF   09
....................     
....................    rtc_init(); 
1028:  BCF    0A.4
1029:  GOTO   08B
102A:  BSF    0A.4
....................    delay_ms(20); 
102B:  MOVLW  14
102C:  MOVWF  41
102D:  BCF    0A.4
102E:  CALL   0B1
102F:  BSF    0A.4
....................  
....................     
....................       while(1) 
....................    { 
....................     for(j=0;j<190;j++) //for saat 
1030:  CLRF   2F
1031:  MOVF   2F,W
1032:  SUBLW  BD
1033:  BTFSS  03.0
1034:  GOTO   141
....................        { 
....................        if (input(set)){buton(); ayarlar();} 
1035:  BSF    20.4
1036:  MOVF   20,W
1037:  BSF    03.5
1038:  MOVWF  07
1039:  BCF    03.5
103A:  BTFSS  07.4
103B:  GOTO   042
103C:  BCF    0A.4
103D:  CALL   0C6
103E:  BSF    0A.4
103F:  BCF    0A.4
1040:  CALL   2D5
1041:  BSF    0A.4
....................        if (input(arttir) && input(azalt)){buton(); alarm_set();} 
1042:  BSF    20.6
1043:  MOVF   20,W
1044:  BSF    03.5
1045:  MOVWF  07
1046:  BCF    03.5
1047:  BTFSS  07.6
1048:  GOTO   058
1049:  BSF    20.7
104A:  MOVF   20,W
104B:  BSF    03.5
104C:  MOVWF  07
104D:  BCF    03.5
104E:  BTFSS  07.7
104F:  GOTO   058
1050:  BCF    0A.4
1051:  CALL   0C6
1052:  BSF    0A.4
1053:  BCF    0A.4
1054:  BSF    0A.3
1055:  CALL   000
1056:  BSF    0A.4
1057:  BCF    0A.3
....................         
....................        rtc_get_time(saat,dakika,saniye);  // DS1302'den saat,dakika,saniye bilgileri alýnýyor 
....................        saat_basi(); 
*
107F:  BCF    0A.4
1080:  CALL   632
1081:  BSF    0A.4
....................        alarm_kontrol(); 
1082:  BCF    0A.4
1083:  CALL   651
1084:  BSF    0A.4
....................         
....................        display1_birler=saat%10;  // birler basamaðý için % iþareti ile mod lu bölme yapýlarak 10 a bölümünden kalan hesaplanýyor.              
1085:  MOVF   23,W
1086:  MOVWF  3B
1087:  MOVLW  0A
1088:  MOVWF  3C
1089:  BCF    0A.4
108A:  CALL   166
108B:  BSF    0A.4
108C:  MOVF   77,W
108D:  MOVWF  29
....................        display1_onlar=saat/10;   // saat degerini 10 a bölüp onlar basamaðý hesaplanýyor. 
108E:  MOVF   23,W
108F:  MOVWF  3B
1090:  MOVLW  0A
1091:  MOVWF  3C
1092:  BCF    0A.4
1093:  CALL   166
1094:  BSF    0A.4
1095:  MOVF   78,W
1096:  MOVWF  28
....................        display2_birler= dakika%10; 
1097:  MOVF   22,W
1098:  MOVWF  3B
1099:  MOVLW  0A
109A:  MOVWF  3C
109B:  BCF    0A.4
109C:  CALL   166
109D:  BSF    0A.4
109E:  MOVF   77,W
109F:  MOVWF  2B
....................        display2_onlar=dakika/10; 
10A0:  MOVF   22,W
10A1:  MOVWF  3B
10A2:  MOVLW  0A
10A3:  MOVWF  3C
10A4:  BCF    0A.4
10A5:  CALL   166
10A6:  BSF    0A.4
10A7:  MOVF   78,W
10A8:  MOVWF  2A
....................        display3_birler=saniye%10;     
10A9:  MOVF   21,W
10AA:  MOVWF  3B
10AB:  MOVLW  0A
10AC:  MOVWF  3C
10AD:  BCF    0A.4
10AE:  CALL   166
10AF:  BSF    0A.4
10B0:  MOVF   77,W
10B1:  MOVWF  2D
....................        display3_onlar=saniye/10; 
10B2:  MOVF   21,W
10B3:  MOVWF  3B
10B4:  MOVLW  0A
10B5:  MOVWF  3C
10B6:  BCF    0A.4
10B7:  CALL   166
10B8:  BSF    0A.4
10B9:  MOVF   78,W
10BA:  MOVWF  2C
....................         
....................        if(saniye%2==1){ 
10BB:  MOVF   21,W
10BC:  ANDLW  01
10BD:  SUBLW  01
10BE:  BTFSS  03.2
10BF:  GOTO   0F7
....................        display_goster(digit1[display3_birler]); 
10C0:  MOVF   2D,W
10C1:  BCF    0A.4
10C2:  CALL   012
10C3:  BSF    0A.4
10C4:  MOVWF  38
10C5:  MOVWF  39
10C6:  BCF    0A.4
10C7:  CALL   0D2
10C8:  BSF    0A.4
....................        display_goster(digit1[display3_onlar]); 
10C9:  MOVF   2C,W
10CA:  BCF    0A.4
10CB:  CALL   012
10CC:  BSF    0A.4
10CD:  MOVWF  38
10CE:  MOVWF  39
10CF:  BCF    0A.4
10D0:  CALL   0D2
10D1:  BSF    0A.4
....................        display_goster(digit1[display2_birler]); 
10D2:  MOVF   2B,W
10D3:  BCF    0A.4
10D4:  CALL   012
10D5:  BSF    0A.4
10D6:  MOVWF  38
10D7:  MOVWF  39
10D8:  BCF    0A.4
10D9:  CALL   0D2
10DA:  BSF    0A.4
....................        display_goster(digit1[display2_onlar]); 
10DB:  MOVF   2A,W
10DC:  BCF    0A.4
10DD:  CALL   012
10DE:  BSF    0A.4
10DF:  MOVWF  38
10E0:  MOVWF  39
10E1:  BCF    0A.4
10E2:  CALL   0D2
10E3:  BSF    0A.4
....................        display_goster(digit1[display1_birler]); 
10E4:  MOVF   29,W
10E5:  BCF    0A.4
10E6:  CALL   012
10E7:  BSF    0A.4
10E8:  MOVWF  38
10E9:  MOVWF  39
10EA:  BCF    0A.4
10EB:  CALL   0D2
10EC:  BSF    0A.4
....................        display_goster(digit1[display1_onlar]); 
10ED:  MOVF   28,W
10EE:  BCF    0A.4
10EF:  CALL   012
10F0:  BSF    0A.4
10F1:  MOVWF  38
10F2:  MOVWF  39
10F3:  BCF    0A.4
10F4:  CALL   0D2
10F5:  BSF    0A.4
....................        } 
10F6:  GOTO   12D
....................        else{ 
....................        display_goster(digit[display3_birler]); 
10F7:  MOVF   2D,W
10F8:  BCF    0A.4
10F9:  CALL   004
10FA:  BSF    0A.4
10FB:  MOVWF  38
10FC:  MOVWF  39
10FD:  BCF    0A.4
10FE:  CALL   0D2
10FF:  BSF    0A.4
....................        display_goster(digit[display3_onlar]); 
1100:  MOVF   2C,W
1101:  BCF    0A.4
1102:  CALL   004
1103:  BSF    0A.4
1104:  MOVWF  38
1105:  MOVWF  39
1106:  BCF    0A.4
1107:  CALL   0D2
1108:  BSF    0A.4
....................        display_goster(digit[display2_birler]); 
1109:  MOVF   2B,W
110A:  BCF    0A.4
110B:  CALL   004
110C:  BSF    0A.4
110D:  MOVWF  38
110E:  MOVWF  39
110F:  BCF    0A.4
1110:  CALL   0D2
1111:  BSF    0A.4
....................        display_goster(digit[display2_onlar]); 
1112:  MOVF   2A,W
1113:  BCF    0A.4
1114:  CALL   004
1115:  BSF    0A.4
1116:  MOVWF  38
1117:  MOVWF  39
1118:  BCF    0A.4
1119:  CALL   0D2
111A:  BSF    0A.4
....................        display_goster(digit[display1_birler]); 
111B:  MOVF   29,W
111C:  BCF    0A.4
111D:  CALL   004
111E:  BSF    0A.4
111F:  MOVWF  38
1120:  MOVWF  39
1121:  BCF    0A.4
1122:  CALL   0D2
1123:  BSF    0A.4
....................        display_goster(digit[display1_onlar]); 
1124:  MOVF   28,W
1125:  BCF    0A.4
1126:  CALL   004
1127:  BSF    0A.4
1128:  MOVWF  38
1129:  MOVWF  39
112A:  BCF    0A.4
112B:  CALL   0D2
112C:  BSF    0A.4
....................        } 
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
112D:  BSF    03.5
112E:  BCF    06.2
112F:  BCF    03.5
1130:  BSF    06.2
....................        delay_us(30); 
1131:  MOVLW  09
1132:  MOVWF  77
1133:  DECFSZ 77,F
1134:  GOTO   133
1135:  GOTO   136
....................        output_low(ST_CP); 
1136:  BSF    03.5
1137:  BCF    06.2
1138:  BCF    03.5
1139:  BCF    06.2
....................        delay_ms(6);     
113A:  MOVLW  06
113B:  MOVWF  41
113C:  BCF    0A.4
113D:  CALL   0B1
113E:  BSF    0A.4
113F:  INCF   2F,F
1140:  GOTO   031
....................        } // for saat   
....................         
....................        gecis_animasyon(); 
1141:  BCF    0A.4
1142:  CALL   2B6
1143:  BSF    0A.4
....................         
....................        for(j=0;j<190;j++)  //for tarih 
1144:  CLRF   2F
1145:  MOVF   2F,W
1146:  SUBLW  BD
1147:  BTFSS  03.0
1148:  GOTO   24D
....................        { 
....................        if (input(set)) {buton(); ayarlar();} 
1149:  BSF    20.4
114A:  MOVF   20,W
114B:  BSF    03.5
114C:  MOVWF  07
114D:  BCF    03.5
114E:  BTFSS  07.4
114F:  GOTO   156
1150:  BCF    0A.4
1151:  CALL   0C6
1152:  BSF    0A.4
1153:  BCF    0A.4
1154:  CALL   2D5
1155:  BSF    0A.4
....................        if (input(arttir) && input(azalt)){buton(); alarm_set();} 
1156:  BSF    20.6
1157:  MOVF   20,W
1158:  BSF    03.5
1159:  MOVWF  07
115A:  BCF    03.5
115B:  BTFSS  07.6
115C:  GOTO   16C
115D:  BSF    20.7
115E:  MOVF   20,W
115F:  BSF    03.5
1160:  MOVWF  07
1161:  BCF    03.5
1162:  BTFSS  07.7
1163:  GOTO   16C
1164:  BCF    0A.4
1165:  CALL   0C6
1166:  BSF    0A.4
1167:  BCF    0A.4
1168:  BSF    0A.3
1169:  CALL   000
116A:  BSF    0A.4
116B:  BCF    0A.3
....................         
....................        rtc_get_time(saat,dakika,saniye);  // DS1302'den saat,dakika,saniye bilgileri alýnýyor 
....................        saat_basi(); 
*
1193:  BCF    0A.4
1194:  CALL   632
1195:  BSF    0A.4
....................        alarm_kontrol(); 
1196:  BCF    0A.4
1197:  CALL   651
1198:  BSF    0A.4
....................  
....................        rtc_get_date(gun,ay,yil,haftanin_gunu); 
....................        display1_onlar=gun/10;   // saat degerini 10 a bölüp onlar basamaðý hesaplanýyor. 
*
11CD:  MOVF   24,W
11CE:  MOVWF  3B
11CF:  MOVLW  0A
11D0:  MOVWF  3C
11D1:  BCF    0A.4
11D2:  CALL   166
11D3:  BSF    0A.4
11D4:  MOVF   78,W
11D5:  MOVWF  28
....................        display1_birler=gun%10;  // birler basamaðý için % iþareti ile mod lu bölme yapýlarak 10 a bölümünden kalan hesaplanýyor.              
11D6:  MOVF   24,W
11D7:  MOVWF  3B
11D8:  MOVLW  0A
11D9:  MOVWF  3C
11DA:  BCF    0A.4
11DB:  CALL   166
11DC:  BSF    0A.4
11DD:  MOVF   77,W
11DE:  MOVWF  29
....................        display2_onlar=ay/10; 
11DF:  MOVF   25,W
11E0:  MOVWF  3B
11E1:  MOVLW  0A
11E2:  MOVWF  3C
11E3:  BCF    0A.4
11E4:  CALL   166
11E5:  BSF    0A.4
11E6:  MOVF   78,W
11E7:  MOVWF  2A
....................        display2_birler= ay%10; 
11E8:  MOVF   25,W
11E9:  MOVWF  3B
11EA:  MOVLW  0A
11EB:  MOVWF  3C
11EC:  BCF    0A.4
11ED:  CALL   166
11EE:  BSF    0A.4
11EF:  MOVF   77,W
11F0:  MOVWF  2B
....................        display3_onlar=yil/10;  
11F1:  MOVF   26,W
11F2:  MOVWF  3B
11F3:  MOVLW  0A
11F4:  MOVWF  3C
11F5:  BCF    0A.4
11F6:  CALL   166
11F7:  BSF    0A.4
11F8:  MOVF   78,W
11F9:  MOVWF  2C
....................        display3_birler=yil%10;       
11FA:  MOVF   26,W
11FB:  MOVWF  3B
11FC:  MOVLW  0A
11FD:  MOVWF  3C
11FE:  BCF    0A.4
11FF:  CALL   166
1200:  BSF    0A.4
1201:  MOVF   77,W
1202:  MOVWF  2D
....................         
....................        display_goster(digit1[display3_birler]); 
1203:  MOVF   2D,W
1204:  BCF    0A.4
1205:  CALL   012
1206:  BSF    0A.4
1207:  MOVWF  38
1208:  MOVWF  39
1209:  BCF    0A.4
120A:  CALL   0D2
120B:  BSF    0A.4
....................        display_goster(digit1[display3_onlar]); 
120C:  MOVF   2C,W
120D:  BCF    0A.4
120E:  CALL   012
120F:  BSF    0A.4
1210:  MOVWF  38
1211:  MOVWF  39
1212:  BCF    0A.4
1213:  CALL   0D2
1214:  BSF    0A.4
....................        display_goster(digit1[display2_birler]); 
1215:  MOVF   2B,W
1216:  BCF    0A.4
1217:  CALL   012
1218:  BSF    0A.4
1219:  MOVWF  38
121A:  MOVWF  39
121B:  BCF    0A.4
121C:  CALL   0D2
121D:  BSF    0A.4
....................        display_goster(digit1[display2_onlar]); 
121E:  MOVF   2A,W
121F:  BCF    0A.4
1220:  CALL   012
1221:  BSF    0A.4
1222:  MOVWF  38
1223:  MOVWF  39
1224:  BCF    0A.4
1225:  CALL   0D2
1226:  BSF    0A.4
....................        display_goster(digit1[display1_birler]); 
1227:  MOVF   29,W
1228:  BCF    0A.4
1229:  CALL   012
122A:  BSF    0A.4
122B:  MOVWF  38
122C:  MOVWF  39
122D:  BCF    0A.4
122E:  CALL   0D2
122F:  BSF    0A.4
....................        display_goster(digit1[display1_onlar]); 
1230:  MOVF   28,W
1231:  BCF    0A.4
1232:  CALL   012
1233:  BSF    0A.4
1234:  MOVWF  38
1235:  MOVWF  39
1236:  BCF    0A.4
1237:  CALL   0D2
1238:  BSF    0A.4
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
1239:  BSF    03.5
123A:  BCF    06.2
123B:  BCF    03.5
123C:  BSF    06.2
....................        delay_us(30); 
123D:  MOVLW  09
123E:  MOVWF  77
123F:  DECFSZ 77,F
1240:  GOTO   23F
1241:  GOTO   242
....................        output_low(ST_CP); 
1242:  BSF    03.5
1243:  BCF    06.2
1244:  BCF    03.5
1245:  BCF    06.2
....................        delay_ms(6);            
1246:  MOVLW  06
1247:  MOVWF  41
1248:  BCF    0A.4
1249:  CALL   0B1
124A:  BSF    0A.4
124B:  INCF   2F,F
124C:  GOTO   145
....................        } // for tarih  
....................         
....................        gecis_animasyon();  
124D:  BCF    0A.4
124E:  CALL   2B6
124F:  BSF    0A.4
....................       sicaklik_ekrani=1; 
1250:  MOVLW  01
1251:  MOVWF  37
....................        bilgi=ds1820_read()+2; 
1252:  BCF    0A.4
1253:  BSF    0A.3
1254:  GOTO   36B
1255:  BSF    0A.4
1256:  BCF    0A.3
1257:  MOVF   7A,W
1258:  MOVWF  3B
1259:  MOVF   79,W
125A:  MOVWF  3A
125B:  MOVF   78,W
125C:  MOVWF  39
125D:  MOVF   77,W
125E:  MOVWF  38
125F:  CLRF   3D
1260:  MOVF   04,W
1261:  MOVWF  3C
1262:  BCF    3D.0
1263:  BTFSC  03.7
1264:  BSF    3D.0
1265:  BCF    03.1
1266:  MOVF   3B,W
1267:  MOVWF  41
1268:  MOVF   3A,W
1269:  MOVWF  40
126A:  MOVF   39,W
126B:  MOVWF  3F
126C:  MOVF   38,W
126D:  MOVWF  3E
126E:  CLRF   45
126F:  CLRF   44
1270:  CLRF   43
1271:  MOVLW  80
1272:  MOVWF  42
1273:  BCF    0A.4
1274:  BSF    0A.3
1275:  GOTO   4BB
1276:  BSF    0A.4
1277:  BCF    0A.3
1278:  MOVF   3C,W
1279:  MOVWF  04
127A:  BCF    03.7
127B:  BTFSC  3D.0
127C:  BSF    03.7
127D:  MOVF   7A,W
127E:  MOVWF  41
127F:  MOVF   79,W
1280:  MOVWF  40
1281:  MOVF   78,W
1282:  MOVWF  3F
1283:  MOVF   77,W
1284:  MOVWF  3E
1285:  BCF    0A.4
1286:  GOTO   72F
1287:  BSF    0A.4
1288:  MOVF   79,W
1289:  MOVWF  36
128A:  MOVF   78,W
128B:  MOVWF  35
....................        for(j=0;j<190;j++) 
128C:  CLRF   2F
128D:  MOVF   2F,W
128E:  SUBLW  BD
128F:  BTFSS  03.0
1290:  GOTO   333
....................        { 
....................        if (input(set)) {buton(); ayarlar();} 
1291:  BSF    20.4
1292:  MOVF   20,W
1293:  BSF    03.5
1294:  MOVWF  07
1295:  BCF    03.5
1296:  BTFSS  07.4
1297:  GOTO   29E
1298:  BCF    0A.4
1299:  CALL   0C6
129A:  BSF    0A.4
129B:  BCF    0A.4
129C:  CALL   2D5
129D:  BSF    0A.4
....................        if (input(arttir) && input(azalt)){buton(); alarm_set();} 
129E:  BSF    20.6
129F:  MOVF   20,W
12A0:  BSF    03.5
12A1:  MOVWF  07
12A2:  BCF    03.5
12A3:  BTFSS  07.6
12A4:  GOTO   2B4
12A5:  BSF    20.7
12A6:  MOVF   20,W
12A7:  BSF    03.5
12A8:  MOVWF  07
12A9:  BCF    03.5
12AA:  BTFSS  07.7
12AB:  GOTO   2B4
12AC:  BCF    0A.4
12AD:  CALL   0C6
12AE:  BSF    0A.4
12AF:  BCF    0A.4
12B0:  BSF    0A.3
12B1:  CALL   000
12B2:  BSF    0A.4
12B3:  BCF    0A.3
....................        rtc_get_time(saat,dakika,saniye);  // DS1302'den saat,dakika,saniye bilgileri alýnýyor 
....................        saat_basi(); 
*
12DB:  BCF    0A.4
12DC:  CALL   632
12DD:  BSF    0A.4
....................        alarm_kontrol(); 
12DE:  BCF    0A.4
12DF:  CALL   651
12E0:  BSF    0A.4
....................        display3_birler=(0X00); 
12E1:  CLRF   2D
....................        display3_onlar=(0xB6); 
12E2:  MOVLW  B6
12E3:  MOVWF  2C
....................        display2_birler=(0x0F); 
12E4:  MOVLW  0F
12E5:  MOVWF  2B
....................        display1_birler=(int)bilgi/10;          
12E6:  MOVF   35,W
12E7:  MOVWF  3B
12E8:  MOVLW  0A
12E9:  MOVWF  3C
12EA:  BCF    0A.4
12EB:  CALL   166
12EC:  BSF    0A.4
12ED:  MOVF   78,W
12EE:  MOVWF  29
....................        display2_onlar=(int)bilgi%10; 
12EF:  MOVF   35,W
12F0:  MOVWF  3B
12F1:  MOVLW  0A
12F2:  MOVWF  3C
12F3:  BCF    0A.4
12F4:  CALL   166
12F5:  BSF    0A.4
12F6:  MOVF   77,W
12F7:  MOVWF  2A
....................        display1_onlar=(0X00); 
12F8:  CLRF   28
....................        
....................        display_goster(display3_birler); 
12F9:  MOVF   2D,W
12FA:  MOVWF  39
12FB:  BCF    0A.4
12FC:  CALL   0D2
12FD:  BSF    0A.4
....................        display_goster(display3_onlar); 
12FE:  MOVF   2C,W
12FF:  MOVWF  39
1300:  BCF    0A.4
1301:  CALL   0D2
1302:  BSF    0A.4
....................        display_goster(display2_birler); 
1303:  MOVF   2B,W
1304:  MOVWF  39
1305:  BCF    0A.4
1306:  CALL   0D2
1307:  BSF    0A.4
....................        display_goster(digit[display2_onlar]); 
1308:  MOVF   2A,W
1309:  BCF    0A.4
130A:  CALL   004
130B:  BSF    0A.4
130C:  MOVWF  38
130D:  MOVWF  39
130E:  BCF    0A.4
130F:  CALL   0D2
1310:  BSF    0A.4
....................        display_goster(digit[display1_birler]); 
1311:  MOVF   29,W
1312:  BCF    0A.4
1313:  CALL   004
1314:  BSF    0A.4
1315:  MOVWF  38
1316:  MOVWF  39
1317:  BCF    0A.4
1318:  CALL   0D2
1319:  BSF    0A.4
....................        display_goster(display1_onlar); 
131A:  MOVF   28,W
131B:  MOVWF  39
131C:  BCF    0A.4
131D:  CALL   0D2
131E:  BSF    0A.4
....................  
....................        output_high(ST_CP);  //storage register clock giriþini ver ve bilgiler portlarda görünsün. 
131F:  BSF    03.5
1320:  BCF    06.2
1321:  BCF    03.5
1322:  BSF    06.2
....................        delay_us(30); 
1323:  MOVLW  09
1324:  MOVWF  77
1325:  DECFSZ 77,F
1326:  GOTO   325
1327:  GOTO   328
....................        output_low(ST_CP); 
1328:  BSF    03.5
1329:  BCF    06.2
132A:  BCF    03.5
132B:  BCF    06.2
....................        delay_ms(6);        
132C:  MOVLW  06
132D:  MOVWF  41
132E:  BCF    0A.4
132F:  CALL   0B1
1330:  BSF    0A.4
1331:  INCF   2F,F
1332:  GOTO   28D
....................        } 
....................        sicaklik_ekrani=0; 
1333:  CLRF   37
....................        gecis_animasyon(); 
1334:  BCF    0A.4
1335:  CALL   2B6
1336:  BSF    0A.4
1337:  GOTO   030
....................    } 
.................... } 
1338:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
